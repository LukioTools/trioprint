#ifndef HTML_TEMPLATE_H
#define HTML_TEMPLATE_H

const char CONFIGURATION_HTML_TEMPLATE[] PROGMEM = 
"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>Flash Memory Configuration</title>"
"<style>body {font-family: Arial, sans-serif;padding: 20px;background: #151d2b;} label {color: #d1dae"
"3;} div {color: #d1dae3;} .error {color: red;} .success {color: rgb(23, 186, 29);} .container {backg"
"round: #1f2333;padding: 20px;border-radius: 10px;max-width: 800px;margin: auto;box-shadow: 0px 0px 1"
"0px rgba(0, 0, 0, 0.1);} .section-title {margin-top: 20px;font-size: 20px;font-weight: bold;color: #"
"d1dae3;border-bottom: 2px solid #ccc;padding-bottom: 5px;margin-bottom: 10px;} label {display: block"
";margin-top: 10px;font-weight: bold;} input,select {width: 90%;padding: 8px;margin-top: 5px;border-r"
"adius: 0px;background-color: #d1dae3;} input[type=\"number\"] {max-width: 100px; } select {max-width: "
"100px;} button {padding: 10px 20px;background: #007BFF;color: white;border: none;border-radius: 5px;"
"cursor: pointer;} button:disabled {background: gray;} .hidden {display: none;} #status {margin-top: "
"20px;font-weight: bold;} #SdCardStatus {font-weight: bold;} #rebootStatusText {font-weight: bold;} ."
"required::after {content: \" *\";color: red;} .label-wrapper {display: flex;align-items: center;gap: 5"
"px;margin-bottom: 4px;justify-content: space-between;} .tooltip {position: relative;display: inline-"
"block;cursor: pointer;} .tooltip .tooltiptext {visibility: hidden;width: 220px; background-color: #5"
"55;color: #fff;text-align: left;border-radius: 6px;padding: 8px;position: absolute;bottom: 25px; rig"
"ht: 0; z-index: 1000;opacity: 0;transition: opacity 0.3s;font-size: 14px;} .tooltip:hover .tooltipte"
"xt {visibility: visible;opacity: 1;}</style><style>.restart-container { background: #839499;padding:"
" 10px;max-width: 300px;margin-top: 30px;margin-left: auto;margin-right: auto;border-radius: 12px;box"
"-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);text-align: center;} .restart-button {background: #cc2f21;col"
"or: white;padding: 12px 24px;border: none;border-radius: 8px;cursor: pointer;font-size: 16px;transit"
"ion: background 0.3s;} .restart-button:hover {background: #ae0101;} .upload-container {background: #"
"839499;padding: 30px;margin-top: 30px;border-radius: 12px;box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);"
"text-align: center;} .file-input {display: none;} .custom-button {background: #667485;color: white;p"
"adding: 12px 24px;border: none;border-radius: 8px;cursor: pointer;font-size: 16px;transition: backgr"
"ound 0.3s;} .custom-button:hover {background: #6d84d1;} .progress-bar-container {width: 100%;backgro"
"und-color: #ffffff;border-radius: 10px;overflow: hidden;margin-top: 20px;height: 20px;} .progress-ba"
"r {height: 100%;background-color: #4caf50;width: 0%;transition: width 0.3s;} .status-text {margin-to"
"p: 10px;font-size: 14px;color: #d1dae3;}</style><script>function xhrFetch(url, options) {options = o"
"ptions || {};return new Promise(function (resolve, reject) {var xhr = new XMLHttpRequest(); xhr.open"
"(options.method || \'GET\', url); if (options.headers) {for (var key in options.headers) {if (options."
"headers.hasOwnProperty(key)) {xhr.setRequestHeader(key, options.headers[key]);}}} if (options.respon"
"seType) {xhr.responseType = options.responseType;} if (xhr.upload && options.onProgress) {xhr.upload"
".onprogress = function (event) {if (event.lengthComputable) {const progress = (event.loaded / event."
"total) * 100;options.onProgress(progress, event.loaded, event.total);}};} xhr.onload = function () {"
"if (xhr.status >= 200 && xhr.status < 300) {resolve({ok: true,status: xhr.status,statusText: xhr.sta"
"tusText,json: function () {return Promise.resolve(JSON.parse(xhr.responseText));},text: function () "
"{return Promise.resolve(xhr.responseText);}});} else {reject(new Error(\'HTTP Error: \' + xhr.status))"
";}}; xhr.onerror = function () {reject(new Error(\'Network Error\'));}; xhr.send(options.body || null)"
";});}</script></head><body><div class=\"container\"><h1>Trioprint Configuration</h1><div class=\"sectio"
"n-title\">WiFi Settings</div><div class=\"label-wrapper\"><label for=\"wifi_ssid\" class=\"required\">WiFi "
"SSID</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Name of your WiFi network (case-sensiti"
"ve).</span></span></div><input type=\"text\" id=\"wifi_ssid\" value=\"trioprint\" required><div class=\"lab"
"el-wrapper\"><label for=\"wifi_pwd\" class=\"required\">WiFi Password</label><span class=\"tooltip\">?<span"
" class=\"tooltiptext\">Password for your WiFi network.</span></span></div><input type=\"text\" id=\"wifi_"
"pwd\" value=\"trioprint\" required><div class=\"label-wrapper\"><label for=\"ota_pwd\" class=\"required\">OTA"
" Password</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Password used for OTA (Over-The-Ai"
"r) updates.</span></span></div><input type=\"text\" id=\"ota_pwd\" value=\"trioprint\" required><div class"
"=\"section-title\">Web Settings</div><div class=\"label-wrapper\"><label for=\"web_name\" class=\"required\""
">mDNS Name</label><span class=\"tooltip\">?<span class=\"tooltiptext\">You can access the printer at htt"
"p:</span></div><input type=\"text\" id=\"web_name\" value=\"trioprint\" required><div class=\"label-wrapper"
"\"><label for=\"web_server_port\" class=\"required\">Web Server Port</label><span class=\"tooltip\">?<span "
"class=\"tooltiptext\">Port used for the HTTP web server (default: 80).</span></span></div><input type="
"\"number\" id=\"web_server_port\" value=\"80\" required><div class=\"label-wrapper\"><label for=\"web_socket_"
"port\" class=\"required\">Web Socket Port</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Port "
"used for the WebSocket server (default: 81).</span></span></div><input type=\"number\" id=\"web_socket_"
"port\" value=\"81\" required><div class=\"section-title\">SD Card Settings</div><div id=\"SdCardStatus\">Ch"
"ecking...</div><div class=\"label-wrapper\"><label for=\"sd_card_select_pin\" class=\"required\">SD Card s"
"elect pin</label><span class=\"tooltip\">?<span class=\"tooltiptext\">SPI select pin for SD card.</span>"
"</span></div><input type=\"number\" id=\"sd_card_select_pin\" value=\"5\" required><div class=\"label-wrapp"
"er\"><label for=\"sd_spi_speed\" class=\"required\">SD SPI Speed (MHz)</label><span class=\"tooltip\">?<spa"
"n class=\"tooltiptext\">SPI bus speed for SD card communication.</span></span></div><input type=\"numbe"
"r\" id=\"sd_spi_speed\" value=\"16\" required><div class=\"label-wrapper\"><label for=\"sd_card_max_attempts"
"\" class=\"required\">SD Card Max Attempts</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Maxi"
"mum attempts to initialize SD card.</span></span></div><input type=\"number\" id=\"sd_card_max_attempts"
"\" value=\"5\" required><div class=\"label-wrapper\"><label for=\"sd_sector_size\" class=\"required\">SD Sect"
"or Size</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Size of each SD card sector in bytes"
" (typically 512).</span></span></div><input type=\"number\" id=\"sd_sector_size\" value=\"512\" required><"
"div class=\"label-wrapper\"><label for=\"file_chunk_size\" class=\"required\">File Chunk Size (not used)</"
"label><span class=\"tooltip\">?<span class=\"tooltiptext\">not used</span></span></div><input type=\"numb"
"er\" id=\"file_chunk_size\" value=\"1024\" required><div class=\"section-title\">Device Serial Config</div>"
"<div class=\"label-wrapper\"><label for=\"dev_baudrate\" class=\"required\">Baud Rate</label><span class=\""
"tooltip\">?<span class=\"tooltiptext\">Serial communication speed (e.g., 250000 baud).</span></span></d"
"iv><input type=\"number\" id=\"dev_baudrate\" value=\"250000\" required><div class=\"label-wrapper\"><label "
"for=\"dev_serial\" class=\"required\">Serial Instance</label><span class=\"tooltip\">?<span class=\"tooltip"
"text\">Which serial port to use (1, 2, etc.).</span></span></div><input type=\"number\" id=\"dev_serial\""
" value=\"2\" required><div id=\"dev_custom_fields\" class=\"hidden\"><div class=\"label-wrapper\"><label for"
"=\"dev_config\" class=\"required\">Data Format</label><span class=\"tooltip\">?<span class=\"tooltiptext\">S"
"erial data format (e.g., 8N1 = 8 bits, No parity, 1 stop bit).</span></span></div><select id=\"dev_co"
"nfig\" required><option value=\"6\">8N1</option><option value=\"14\">8N2</option><option value=\"38\">8O1</"
"option><option value=\"46\">8O2</option><option value=\"54\">8E1</option><option value=\"62\">8E2</option>"
"<option value=\"4\">7N1</option><option value=\"12\">7N2</option><option value=\"36\">7O1</option><option "
"value=\"44\">7O2</option><option value=\"52\">7E1</option><option value=\"60\">7E2</option></select><div c"
"lass=\"label-wrapper\"><label for=\"dev_rx\" class=\"required\">RX Pin</label><span class=\"tooltip\">?<span"
" class=\"tooltiptext\">Pin number used for receiving data.</span></span></div><input type=\"number\" id="
"\"dev_rx\"><div class=\"label-wrapper\"><label for=\"dev_tx\" class=\"required\">TX Pin</label><span class=\""
"tooltip\">?<span class=\"tooltiptext\">Pin number used for transmitting data.</span></span></div><input"
" type=\"number\" id=\"dev_tx\"></div><div class=\"label-wrapper\"><label for=\"dev_custom\" class=\"required\""
">Custom Config</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Enable manual serial pin/conf"
"ig setup.</span></span></div><select id=\"dev_custom\" required><option value=\"0\">False</option><optio"
"n value=\"1\">True</option></select><div class=\"section-title\">Debug Serial Config</div><div class=\"la"
"bel-wrapper\"><label for=\"deb_baudrate\" class=\"required\">Baud Rate</label><span class=\"tooltip\">?<spa"
"n class=\"tooltiptext\">Debug serial communication speed.</span></span></div><input type=\"number\" id=\""
"deb_baudrate\" value=\"250000\" required><div class=\"label-wrapper\"><label for=\"deb_serial\" class=\"requ"
"ired\">Serial Instance</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Serial port for debug "
"(1, 2, etc.).</span></span></div><input type=\"number\" id=\"deb_serial\" value=\"1\" required><div id=\"de"
"b_custom_fields\" class=\"hidden\"><div class=\"label-wrapper\"><label for=\"deb_config\" class=\"required\">"
"Data Format</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Debug serial data format.</span>"
"</span></div><select id=\"deb_config\" required><option value=\"6\">8N1</option><option value=\"14\">8N2</"
"option><option value=\"38\">8O1</option><option value=\"46\">8O2</option><option value=\"54\">8E1</option>"
"<option value=\"62\">8E2</option><option value=\"4\">7N1</option><option value=\"12\">7N2</option><option "
"value=\"36\">7O1</option><option value=\"44\">7O2</option><option value=\"52\">7E1</option><option value=\""
"60\">7E2</option></select><div class=\"label-wrapper\"><label for=\"deb_rx\" class=\"required\">RX Pin</lab"
"el><span class=\"tooltip\">?<span class=\"tooltiptext\">Debug RX pin number.</span></span></div><input t"
"ype=\"number\" id=\"deb_rx\"><div class=\"label-wrapper\"><label for=\"deb_tx\" class=\"required\">TX Pin</lab"
"el><span class=\"tooltip\">?<span class=\"tooltiptext\">Debug TX pin number.</span></span></div><input t"
"ype=\"number\" id=\"deb_tx\"></div><div class=\"label-wrapper\"><label for=\"deb_custom\" class=\"required\">C"
"ustom Config</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Enable custom debug config.</sp"
"an></span></div><select id=\"deb_custom\" required><option value=\"0\">False</option><option value=\"1\">T"
"rue</option></select><div class=\"label-wrapper\"><label for=\"deb_enabled\" class=\"required\">Enabled</l"
"abel><span class=\"tooltip\">?<span class=\"tooltiptext\">Turn debug serial output ON or OFF.</span></sp"
"an></div><select id=\"deb_enabled\" required><option value=\"1\">True</option><option value=\"0\">False</o"
"ption></select><div class=\"section-title\">Printer Settings</div><div class=\"label-wrapper\"><label fo"
"r=\"printer_command_size\" class=\"required\">Printer Command buffer size</label><span class=\"tooltip\">?"
"<span class=\"tooltiptext\">How many commands can printers buffer hold.</span></span></div><input type"
"=\"number\" id=\"printer_command_size\" value=\"12\" required><div class=\"label-wrapper\"><label for=\"print"
"er_buffer_size\" class=\"required\">Printer Buffer Size</label><span class=\"tooltip\">?<span class=\"tool"
"tiptext\">how many characters can printers buffer hold.</span></span></div><input type=\"number\" id=\"p"
"rinter_buffer_size\" value=\"1152\" required><div class=\"label-wrapper\"><label for=\"printer_timeout\" cl"
"ass=\"required\">Printer Timeout (ms)</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Timeout "
"for printer responses (milliseconds). After that the esp considers itsbeing ofline</span></span></di"
"v><input type=\"number\" id=\"printer_timeout\" value=\"1000\" required><div class=\"upload-container\"><h2 "
"style=\"color: #d1dae3;\">Upload Main web Page</h2><p>this is not required if file was uploaded into S"
"D card beforehand</p><input type=\"file\" id=\"fileInput\" class=\"file-input\"><button class=\"custom-butt"
"on\" onclick=\"document.getElementById(\'fileInput\').click()\">Select File</button><div class=\"progress-"
"bar-container\" id=\"progressContainer\" style=\"display: none;\"><div class=\"progress-bar\" id=\"progressB"
"ar\"></div></div><div class=\"status-text\" id=\"statusText\"></div></div><div class=\"restart-container\">"
"<button class=\"restart-button\" onclick=\"reboot()\">Reboot</button><div class=\"\" id=\"rebootStatusText\""
"></div></div><div id=\"status\"></div></div><script>const configMap = {wifi_ssid: 0,wifi_pwd: 1,ota_pw"
"d: 2,web_name: 3,web_server_port: 4,web_socket_port: 5,sd_sector_size: 6,file_chunk_size: 7,sd_spi_s"
"peed: 8,sd_card_select_pin: 9,sd_card_max_attempts: 10,dev_serial_group: 11,deb_serial_group: 12,pri"
"nter_buffer_size: 13,printer_command_size: 14,printer_timeout: 15}; const inputs = document.querySel"
"ectorAll(\'input, select\');const statusDiv = document.getElementById(\'status\');async function saveFie"
"ld(input) {const id = input.id;let configId;const formData = new FormData();if (id.startsWith(\'dev_\'"
")) {configId = configMap.dev_serial_group;formData.append(\'config\', configId);formData.append(\'br\', "
"document.getElementById(\'dev_baudrate\').value);formData.append(\'c\', parseInt(document.getElementById"
"(\'dev_config\').value, 10));formData.append(\'s\', document.getElementById(\'dev_serial\').value);formDat"
"a.append(\'rx\', document.getElementById(\'dev_rx\').value);formData.append(\'tx\', document.getElementByI"
"d(\'dev_tx\').value);formData.append(\'cm\', document.getElementById(\'dev_custom\').value);} else if (id."
"startsWith(\'deb_\')) {configId = configMap.deb_serial_group;formData.append(\'config\', configId);formD"
"ata.append(\'br\', document.getElementById(\'deb_baudrate\').value);formData.append(\'c\', parseInt(docume"
"nt.getElementById(\'deb_config\').value, 10));formData.append(\'s\', document.getElementById(\'deb_serial"
"\').value);formData.append(\'rx\', document.getElementById(\'deb_rx\').value);formData.append(\'tx\', docum"
"ent.getElementById(\'deb_tx\').value);formData.append(\'cm\', document.getElementById(\'deb_custom\').valu"
"e);formData.append(\'e\', document.getElementById(\'deb_enabled\').value);} else {configId = configMap[i"
"d];if (configId === undefined) {console.warn(`No mapping for ${id}`);return;}formData.append(\'config"
"\', configId);formData.append(\'status\', input.value);}statusDiv.innerHTML = `Saving ${id}...`;statusD"
"iv.style.color = \'black\';try {const response = await fetch(\'/config/setDynamicConfig\', {method: \'POS"
"T\',body: formData});if (!response.ok) throw new Error(`HTTP ${response.status}`);const text = await "
"response.text();if (text !== \'saved\') throw new Error(`Server error: ${text}`);statusDiv.innerHTML ="
" `Saved ${id} successfully.`;statusDiv.style.color = \'green\';} catch (err) {statusDiv.innerHTML = `E"
"rror saving ${id}: ${err.message}`;statusDiv.style.color = \'red\';}} inputs.forEach(input => {input.a"
"ddEventListener(\'change\', () => {if (input.required && input.value.trim() === \'\') {input.style.borde"
"rColor = \'red\';return;} else {input.style.borderColor = \'#ccc\';}saveField(input);});}); const devCus"
"tomSelect = document.getElementById(\'dev_custom\');const debCustomSelect = document.getElementById(\'d"
"eb_custom\');const devCustomFields = document.getElementById(\'dev_custom_fields\');const debCustomFiel"
"ds = document.getElementById(\'deb_custom_fields\');devCustomSelect.addEventListener(\'change\', functio"
"n () {devCustomFields.classList.toggle(\'hidden\', this.value !== \'1\');});debCustomSelect.addEventList"
"ener(\'change\', function () {debCustomFields.classList.toggle(\'hidden\', this.value !== \'1\');}); devCu"
"stomFields.classList.toggle(\'hidden\', devCustomSelect.value !== \'1\');debCustomFields.classList.toggl"
"e(\'hidden\', debCustomSelect.value !== \'1\'); function updateProgress(progress, status) {const progres"
"sBar = document.getElementById(\'progressBar\');const statusText = document.getElementById(\'statusText"
"\');progressBar.style.width = progress + \"%\";statusText.innerText = `${status}: ${progress}%`;} docum"
"ent.getElementById(\'fileInput\').addEventListener(\'change\', function (event) {const file = event.targ"
"et.files[0];if (file) {document.getElementById(\'progressContainer\').style.display = \'block\';upload_f"
"ile(file);}}); function xhrFetch(url, options) {options = options || {};return new Promise(function "
"(resolve, reject) {var xhr = new XMLHttpRequest(); xhr.open(options.method || \'GET\', url); if (optio"
"ns.headers) {for (var key in options.headers) {if (options.headers.hasOwnProperty(key)) {xhr.setRequ"
"estHeader(key, options.headers[key]);}}} if (options.responseType) {xhr.responseType = options.respo"
"nseType;} if (xhr.upload && options.onProgress) {xhr.upload.onprogress = function (event) {if (event"
".lengthComputable) {const progress = (event.loaded / event.total) * 100;options.onProgress(progress,"
" event.loaded, event.total);}};} xhr.onload = function () {if (xhr.status >= 200 && xhr.status < 300"
") {resolve({ok: true,status: xhr.status,statusText: xhr.statusText,json: function () {return Promise"
".resolve(JSON.parse(xhr.responseText));},text: function () {return Promise.resolve(xhr.responseText)"
";}});} else {reject(new Error(\'HTTP Error: \' + xhr.status));}}; xhr.onerror = function () {reject(ne"
"w Error(\'Network Error\'));}; xhr.send(options.body || null);});} function upload_file(file) {cwd = \'"
"/\';console.log(`uploading file: \'${file.name}\' to path \'${cwd}\'`);const formData = new FormData();fo"
"rmData.append(\"file\", file);xhrFetch(`/fm/uploadFile/?path=${cwd}`, {method: \"POST\",body: formData,o"
"nProgress: function (progress, loaded, total) {console.log(`Progress: ${progress.toFixed(2)}% (${loa"
"ded}/${total} bytes)`);updateProgress(progress.toFixed(2), \"UPLOAD STATUS\");}}).then(function (respz"
") {console.log(respz);files();}).catch(function (err) {console.error(err);const statusDiv = document"
".getElementById(\'statusText\');statusDiv.innerHTML = `Error uploading ${file.name}: ${err.message}`;s"
"tatusDiv.style.color = \'red\';});} async function fetchSDCardStatus() {try {const response = await fe"
"tch(\'/server/sdCardStatus\');const data = await response.json();const sdCardStatusElement = document."
"getElementById(\'SdCardStatus\'); if (data.cardStatus) {sdCardStatusElement.textContent = \'SD Card is "
"Initialized\';sdCardStatusElement.classList.remove(\'error\');sdCardStatusElement.classList.add(\'succes"
"s\');} else {sdCardStatusElement.textContent = \'SD Card is NOT Initialized\';sdCardStatusElement.class"
"List.remove(\'success\');sdCardStatusElement.classList.add(\'error\');}} catch (error) {document.getElem"
"entById(\'SdCardStatus\').textContent = \'Error fetching status\';document.getElementById(\'SdCardStatus\'"
").classList.add(\'error\');}} fetchSDCardStatus(); setInterval(fetchSDCardStatus, 500); async function"
" fetchFlashStorage() {for (const [id, configNum] of Object.entries(configMap)) {try {const response "
"= await fetch(`/config/getDynamicConfig?config=${configNum}`);const text = await response.text();con"
"st element = document.getElementById(id);if (element) {element.value = text.trim();}} catch (error) "
"{console.error(`Failed to fetch config ${configNum} for ${id}`, error);}} try {const devResponse = a"
"wait fetch(`/config/getDynamicConfig?config=11`);devText = await devResponse.text();[baudRate, confi"
"g, serial, rx, tx, custom] = devText.split(\',\'); document.getElementById(\'dev_baudrate\').value = bau"
"dRate;document.getElementById(\'dev_serial\').value = serial;document.getElementById(\'dev_custom\').val"
"ue = custom; devCustomFields.classList.toggle(\'hidden\', true); if (custom === \"true\") {devCustomFiel"
"ds.classList.toggle(\'hidden\', false);document.getElementById(\'dev_custom_fields\').classList.remove(\'"
"hidden\');document.getElementById(\'dev_config\').value = config;document.getElementById(\'dev_rx\').valu"
"e = rx;document.getElementById(\'dev_tx\').value = tx;}} catch (error) {console.error(\'Failed to fetch"
" DevSerialConfig\', error);} try {const debResponse = await fetch(`/config/getDynamicConfig?config=12"
"`);debText = await debResponse.text();[baudRate, config, serial, rx, tx, custom, enabled] = debText."
"split(\',\'); document.getElementById(\'deb_baudrate\').value = baudRate;document.getElementById(\'deb_se"
"rial\').value = serial;document.getElementById(\'deb_custom\').value = custom;document.getElementById(\'"
"deb_enabled\').value = enabled; console.log(serial); debCustomFields.classList.toggle(\'hidden\', true)"
"; if (custom === \"true\") {debCustomFields.classList.toggle(\'hidden\', false);document.getElementById("
"\'deb_custom_fields\').classList.remove(\'hidden\');document.getElementById(\'deb_config\').value = config"
";document.getElementById(\'deb_rx\').value = rx;document.getElementById(\'deb_tx\').value = tx;}} catch "
"(error) {console.error(\'Failed to fetch DebugSerialConfig\', error);}} window.addEventListener(\'DOMCo"
"ntentLoaded\', fetchFlashStorage); async function reboot() {try {const response = await fetch(\'/serve"
"r/reboot\');const data = await response.json();const rebootStatusElement = document.getElementById(\'r"
"ebootStatusText\'); if (data.cardStatus) {rebootStatusElement.textContent = \'reboot successful\';reboo"
"tStatusElement.classList.remove(\'error\');location.reload()} else {rebootStatusElement.textContent = "
"\'reboot failed\';rebootStatusElement.classList.add(\'error\');}} catch (error) {document.getElementById"
"(\'rebootStatusText\').textContent = \'Error fetching status\';document.getElementById(\'rebootStatusText"
"\').classList.add(\'error\');}}</script></body></html>"
;

#endif // HTML_TEMPLATE_H
