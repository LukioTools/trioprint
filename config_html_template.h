#ifndef HTML_TEMPLATE_H
#define HTML_TEMPLATE_H

const char CONFIGURATION_HTML_TEMPLATE[] PROGMEM = 
"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>Flash Memory Configuration</title>"
"<style>body {font-family: Arial, sans-serif;padding: 20px;background: #151d2b;} label {color: #d1dae"
"3;} div {color: #d1dae3;} .container {background: #1f2333;padding: 20px;border-radius: 10px;max-widt"
"h: 800px;margin: auto;box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);} .section-title {margin-top: 20px"
";font-size: 20px;font-weight: bold;color: #d1dae3;border-bottom: 2px solid #ccc;padding-bottom: 5px;"
"margin-bottom: 10px;} label {display: block;margin-top: 10px;font-weight: bold;} input,select {width"
": 90%;padding: 8px;margin-top: 5px;border-radius: 0px;background-color: #d1dae3;} input[type=\"number"
"\"] {max-width: 100px; } select {max-width: 100px;} button {padding: 10px 20px;margin-top: 20px;backg"
"round: #007BFF;color: white;border: none;border-radius: 5px;cursor: pointer;} button:disabled {backg"
"round: gray;} .hidden {display: none;} #status {margin-top: 20px;font-weight: bold;} .required::afte"
"r {content: \" *\";color: red;} .label-wrapper {display: flex;align-items: center;gap: 5px;margin-bott"
"om: 4px;justify-content: space-between;} .tooltip {position: relative;display: inline-block;cursor: "
"pointer;} .tooltip .tooltiptext {visibility: hidden;width: 220px; background-color: #555;color: #fff"
";text-align: left;border-radius: 6px;padding: 8px;position: absolute;bottom: 25px; right: 0; z-index"
": 1000;opacity: 0;transition: opacity 0.3s;font-size: 14px;} .tooltip:hover .tooltiptext {visibility"
": visible;opacity: 1;}</style><style>.upload-container {background: #839499;padding: 30px;margin-top"
": 30px;border-radius: 12px;box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);text-align: center;} .file-inpu"
"t {display: none;} .custom-button {background: #667485;color: white;padding: 12px 24px;border: none;"
"border-radius: 8px;cursor: pointer;font-size: 16px;transition: background 0.3s;} .custom-button:hove"
"r {background: #6d84d1;} .progress-bar-container {width: 100%;background-color: #ffffff;border-radiu"
"s: 10px;overflow: hidden;margin-top: 20px;height: 20px;} .progress-bar {height: 100%;background-colo"
"r: #4caf50;width: 0%;transition: width 0.3s;} .status-text {margin-top: 10px;font-size: 14px;color: "
"#d1dae3;}</style><script>function xhrFetch(url, options) {options = options || {};return new Promise"
"(function (resolve, reject) {var xhr = new XMLHttpRequest(); xhr.open(options.method || \'GET\', url);"
" if (options.headers) {for (var key in options.headers) {if (options.headers.hasOwnProperty(key)) {x"
"hr.setRequestHeader(key, options.headers[key]);}}} if (options.responseType) {xhr.responseType = opt"
"ions.responseType;} if (xhr.upload && options.onProgress) {xhr.upload.onprogress = function (event) "
"{if (event.lengthComputable) {const progress = (event.loaded / event.total) * 100;options.onProgress"
"(progress, event.loaded, event.total);}};} xhr.onload = function () {if (xhr.status >= 200 && xhr.st"
"atus < 300) {resolve({ok: true,status: xhr.status,statusText: xhr.statusText,json: function () {retu"
"rn Promise.resolve(JSON.parse(xhr.responseText));},text: function () {return Promise.resolve(xhr.res"
"ponseText);}});} else {reject(new Error(\'HTTP Error: \' + xhr.status));}}; xhr.onerror = function () "
"{reject(new Error(\'Network Error\'));}; xhr.send(options.body || null);});}</script></head><body><div"
" class=\"container\"><h1>Trioprint Configuration</h1><div class=\"section-title\">WiFi Settings</div><di"
"v class=\"label-wrapper\"><label for=\"wifi_ssid\" class=\"required\">WiFi SSID</label><span class=\"toolti"
"p\">?<span class=\"tooltiptext\">Name of your WiFi network (case-sensitive).</span></span></div><input "
"type=\"text\" id=\"wifi_ssid\" value=\"trioprint\" required><div class=\"label-wrapper\"><label for=\"wifi_pw"
"d\" class=\"required\">WiFi Password</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Password f"
"or your WiFi network.</span></span></div><input type=\"text\" id=\"wifi_pwd\" value=\"trioprint\" required"
"><div class=\"label-wrapper\"><label for=\"ota_pwd\" class=\"required\">OTA Password</label><span class=\"t"
"ooltip\">?<span class=\"tooltiptext\">Password used for OTA (Over-The-Air) updates.</span></span></div>"
"<input type=\"text\" id=\"ota_pwd\" value=\"trioprint\" required><div class=\"section-title\">Web Settings</"
"div><div class=\"label-wrapper\"><label for=\"web_name\" class=\"required\">mDNS Name</label><span class=\""
"tooltip\">?<span class=\"tooltiptext\">You can access the printer at http:</span></div><input type=\"tex"
"t\" id=\"web_name\" value=\"trioprint\" required><div class=\"label-wrapper\"><label for=\"web_server_port\" "
"class=\"required\">Web Server Port</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Port used f"
"or the HTTP web server (default: 80).</span></span></div><input type=\"number\" id=\"web_server_port\" v"
"alue=\"80\" required><div class=\"label-wrapper\"><label for=\"web_socket_port\" class=\"required\">Web Sock"
"et Port</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Port used for the WebSocket server ("
"default: 81).</span></span></div><input type=\"number\" id=\"web_socket_port\" value=\"81\" required><div "
"class=\"section-title\">SD Card Settings</div><div class=\"label-wrapper\"><label for=\"sd_sector_size\" c"
"lass=\"required\">SD Sector Size</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Size of each "
"SD card sector in bytes (typically 512).</span></span></div><input type=\"number\" id=\"sd_sector_size\""
" value=\"512\" required><div class=\"label-wrapper\"><label for=\"file_chunk_size\" class=\"required\">File "
"Chunk Size (not used)</label><span class=\"tooltip\">?<span class=\"tooltiptext\">not used</span></span>"
"</div><input type=\"number\" id=\"file_chunk_size\" value=\"1024\" required><div class=\"label-wrapper\"><la"
"bel for=\"sd_spi_speed\" class=\"required\">SD SPI Speed (MHz)</label><span class=\"tooltip\">?<span class"
"=\"tooltiptext\">SPI bus speed for SD card communication.</span></span></div><input type=\"number\" id=\""
"sd_spi_speed\" value=\"16\" required><div class=\"label-wrapper\"><label for=\"sd_card_max_attempts\" class"
"=\"required\">SD Card Max Attempts</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Maximum att"
"empts to initialize SD card.</span></span></div><input type=\"number\" id=\"sd_card_max_attempts\" value"
"=\"5\" required><div class=\"section-title\">Device Serial Config</div><div class=\"label-wrapper\"><label"
" for=\"dev_baudrate\" class=\"required\">Baud Rate</label><span class=\"tooltip\">?<span class=\"tooltiptex"
"t\">Serial communication speed (e.g., 250000 baud).</span></span></div><input type=\"number\" id=\"dev_b"
"audrate\" value=\"250000\" required><div class=\"label-wrapper\"><label for=\"dev_serial\" class=\"required\""
">Serial Instance</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Which serial port to use (1"
", 2, etc.).</span></span></div><input type=\"number\" id=\"dev_serial\" value=\"1\" required><div id=\"dev_"
"custom_fields\" class=\"hidden\"><div class=\"label-wrapper\"><label for=\"dev_config\" class=\"required\">Da"
"ta Format</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Serial data format (e.g., 8N1 = 8 "
"bits, No parity, 1 stop bit).</span></span></div><select id=\"dev_config\" required><option value=\"6\">"
"8N1</option><option value=\"14\">8N2</option><option value=\"38\">8O1</option><option value=\"46\">8O2</op"
"tion><option value=\"54\">8E1</option><option value=\"62\">8E2</option><option value=\"4\">7N1</option><op"
"tion value=\"12\">7N2</option><option value=\"36\">7O1</option><option value=\"44\">7O2</option><option va"
"lue=\"52\">7E1</option><option value=\"60\">7E2</option></select><div class=\"label-wrapper\"><label for=\""
"dev_rx\" class=\"required\">RX Pin</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Pin number u"
"sed for receiving data.</span></span></div><input type=\"number\" id=\"dev_rx\"><div class=\"label-wrappe"
"r\"><label for=\"dev_tx\" class=\"required\">TX Pin</label><span class=\"tooltip\">?<span class=\"tooltiptex"
"t\">Pin number used for transmitting data.</span></span></div><input type=\"number\" id=\"dev_tx\"></div>"
"<div class=\"label-wrapper\"><label for=\"dev_custom\" class=\"required\">Custom Config</label><span class"
"=\"tooltip\">?<span class=\"tooltiptext\">Enable manual serial pin/config setup.</span></span></div><sel"
"ect id=\"dev_custom\" required><option value=\"false\">False</option><option value=\"true\">True</option><"
"/select><div class=\"section-title\">Debug Serial Config</div><div class=\"label-wrapper\"><label for=\"d"
"eb_baudrate\" class=\"required\">Baud Rate</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Debu"
"g serial communication speed.</span></span></div><input type=\"number\" id=\"deb_baudrate\" value=\"25000"
"0\" required><div class=\"label-wrapper\"><label for=\"deb_serial\" class=\"required\">Serial Instance</lab"
"el><span class=\"tooltip\">?<span class=\"tooltiptext\">Serial port for debug (1, 2, etc.).</span></span"
"></div><input type=\"number\" id=\"deb_serial\" value=\"2\" required><div id=\"deb_custom_fields\" class=\"hi"
"dden\"><div class=\"label-wrapper\"><label for=\"deb_config\" class=\"required\">Data Format</label><span c"
"lass=\"tooltip\">?<span class=\"tooltiptext\">Debug serial data format.</span></span></div><select id=\"d"
"eb_config\" required><option value=\"6\">8N1</option><option value=\"14\">8N2</option><option value=\"38\">"
"8O1</option><option value=\"46\">8O2</option><option value=\"54\">8E1</option><option value=\"62\">8E2</op"
"tion><option value=\"4\">7N1</option><option value=\"12\">7N2</option><option value=\"36\">7O1</option><op"
"tion value=\"44\">7O2</option><option value=\"52\">7E1</option><option value=\"60\">7E2</option></select><"
"div class=\"label-wrapper\"><label for=\"deb_rx\" class=\"required\">RX Pin</label><span class=\"tooltip\">?"
"<span class=\"tooltiptext\">Debug RX pin number.</span></span></div><input type=\"number\" id=\"deb_rx\"><"
"div class=\"label-wrapper\"><label for=\"deb_tx\" class=\"required\">TX Pin</label><span class=\"tooltip\">?"
"<span class=\"tooltiptext\">Debug TX pin number.</span></span></div><input type=\"number\" id=\"deb_tx\"><"
"/div><div class=\"label-wrapper\"><label for=\"deb_custom\" class=\"required\">Custom Config</label><span "
"class=\"tooltip\">?<span class=\"tooltiptext\">Enable custom debug config.</span></span></div><select id"
"=\"deb_custom\" required><option value=\"false\">False</option><option value=\"true\">True</option></selec"
"t><div class=\"label-wrapper\"><label for=\"deb_enabled\" class=\"required\">Enabled</label><span class=\"t"
"ooltip\">?<span class=\"tooltiptext\">Turn debug serial output ON or OFF.</span></span></div><select id"
"=\"deb_enabled\" required><option value=\"true\">True</option><option value=\"false\">False</option></sele"
"ct><div class=\"section-title\">Printer Settings</div><div class=\"label-wrapper\"><label for=\"printer_c"
"ommand_size\" class=\"required\">Printer Command buffer size</label><span class=\"tooltip\">?<span class="
"\"tooltiptext\">How many commands can printers buffer hold.</span></span></div><input type=\"number\" id"
"=\"printer_command_size\" value=\"12\" required><div class=\"label-wrapper\"><label for=\"printer_buffer_si"
"ze\" class=\"required\">Printer Buffer Size</label><span class=\"tooltip\">?<span class=\"tooltiptext\">how"
" many characters can printers buffer hold.</span></span></div><input type=\"number\" id=\"printer_buffe"
"r_size\" value=\"1152\" required><div class=\"label-wrapper\"><label for=\"printer_timeout\" class=\"require"
"d\">Printer Timeout (ms)</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Timeout for printer "
"responses (milliseconds). After that the esp considers itsbeing ofline</span></span></div><input typ"
"e=\"number\" id=\"printer_timeout\" value=\"1000\" required><div class=\"upload-container\"><h2 style=\"color"
": #d1dae3;\">Upload Main web Page</h2><p>this is not required if file was uploaded into SD card befor"
"ehand</p><input type=\"file\" id=\"fileInput\" class=\"file-input\"><button class=\"custom-button\" onclick="
"\"document.getElementById(\'fileInput\').click()\">Select File</button><div class=\"progress-bar-containe"
"r\" id=\"progressContainer\" style=\"display: none;\"><div class=\"progress-bar\" id=\"progressBar\"></div></"
"div><div class=\"status-text\" id=\"statusText\"></div></div><div id=\"status\"></div></div><script>const "
"configMap = {wifi_ssid: 0,wifi_pwd: 1,ota_pwd: 2,web_name: 3,web_server_port: 4,web_socket_port: 5,s"
"d_sector_size: 6,file_chunk_size: 7,sd_spi_speed: 8,sd_card_max_attempts: 9,dev_serial_group: 10,deb"
"_serial_group: 11,printer_buffer_size: 12,printer_command_size: 13,printer_timeout: 14}; const input"
"s = document.querySelectorAll(\'input, select\');const statusDiv = document.getElementById(\'status\');a"
"sync function saveField(input) {const id = input.id;let configId;const formData = new FormData();if "
"(id.startsWith(\'dev_\')) {configId = configMap.dev_serial_group;formData.append(\'config\', configId);f"
"ormData.append(\'br\', document.getElementById(\'dev_baudrate\').value);formData.append(\'c\', parseInt(do"
"cument.getElementById(\'dev_config\').value, 10));formData.append(\'s\', document.getElementById(\'dev_se"
"rial\').value);formData.append(\'rx\', document.getElementById(\'dev_rx\').value);formData.append(\'tx\', d"
"ocument.getElementById(\'dev_tx\').value);formData.append(\'cm\', document.getElementById(\'dev_custom\')."
"value);} else if (id.startsWith(\'deb_\')) {configId = configMap.deb_serial_group;formData.append(\'con"
"fig\', configId);formData.append(\'br\', document.getElementById(\'deb_baudrate\').value);formData.append"
"(\'c\', parseInt(document.getElementById(\'deb_config\').value, 10));formData.append(\'s\', document.getEl"
"ementById(\'deb_serial\').value);formData.append(\'rx\', document.getElementById(\'deb_rx\').value);formDa"
"ta.append(\'tx\', document.getElementById(\'deb_tx\').value);formData.append(\'cm\', document.getElementBy"
"Id(\'deb_custom\').value);formData.append(\'e\', document.getElementById(\'deb_enabled\').value);} else {c"
"onfigId = configMap[id];if (configId === undefined) {console.warn(`No mapping for ${id}`);return;}fo"
"rmData.append(\'config\', configId);formData.append(\'status\', input.value);}statusDiv.innerHTML = `Sav"
"ing ${id}...`;statusDiv.style.color = \'black\';try {const response = await fetch(\'/config/setDynamicC"
"onfig\', {method: \'POST\',body: formData});if (!response.ok) throw new Error(`HTTP ${response.status}`"
");const text = await response.text();if (text !== \'saved\') throw new Error(`Server error: ${text}`);"
"statusDiv.innerHTML = `Saved ${id} successfully.`;statusDiv.style.color = \'green\';} catch (err) {sta"
"tusDiv.innerHTML = `Error saving ${id}: ${err.message}`;statusDiv.style.color = \'red\';}} inputs.forE"
"ach(input => {input.addEventListener(\'change\', () => {if (input.required && input.value.trim() === \'"
"\') {input.style.borderColor = \'red\';return;} else {input.style.borderColor = \'#ccc\';}saveField(input"
");});}); const devCustomSelect = document.getElementById(\'dev_custom\');const debCustomSelect = docum"
"ent.getElementById(\'deb_custom\');const devCustomFields = document.getElementById(\'dev_custom_fields\'"
");const debCustomFields = document.getElementById(\'deb_custom_fields\');devCustomSelect.addEventListe"
"ner(\'change\', function () {devCustomFields.classList.toggle(\'hidden\', this.value !== \'true\');});debC"
"ustomSelect.addEventListener(\'change\', function () {debCustomFields.classList.toggle(\'hidden\', this."
"value !== \'true\');}); devCustomFields.classList.toggle(\'hidden\', devCustomSelect.value !== \'true\');d"
"ebCustomFields.classList.toggle(\'hidden\', debCustomSelect.value !== \'true\'); function updateProgress"
"(progress, status) {const progressBar = document.getElementById(\'progressBar\');const statusText = do"
"cument.getElementById(\'statusText\');progressBar.style.width = progress + \"%\";statusText.innerText = "
"`${status}: ${progress}%`;} document.getElementById(\'fileInput\').addEventListener(\'change\', function"
" (event) {const file = event.target.files[0];if (file) {document.getElementById(\'progressContainer\')"
".style.display = \'block\';upload_file(file);}}); function xhrFetch(url, options) {options = options |"
"| {};return new Promise(function (resolve, reject) {var xhr = new XMLHttpRequest(); xhr.open(options"
".method || \'GET\', url); if (options.headers) {for (var key in options.headers) {if (options.headers."
"hasOwnProperty(key)) {xhr.setRequestHeader(key, options.headers[key]);}}} if (options.responseType) "
"{xhr.responseType = options.responseType;} if (xhr.upload && options.onProgress) {xhr.upload.onprogr"
"ess = function (event) {if (event.lengthComputable) {const progress = (event.loaded / event.total) *"
" 100;options.onProgress(progress, event.loaded, event.total);}};} xhr.onload = function () {if (xhr."
"status >= 200 && xhr.status < 300) {resolve({ok: true,status: xhr.status,statusText: xhr.statusText,"
"json: function () {return Promise.resolve(JSON.parse(xhr.responseText));},text: function () {return "
"Promise.resolve(xhr.responseText);}});} else {reject(new Error(\'HTTP Error: \' + xhr.status));}}; xhr"
".onerror = function () {reject(new Error(\'Network Error\'));}; xhr.send(options.body || null);});} fu"
"nction upload_file(file) {cwd = \'/\';console.log(`uploading file: \'${file.name}\' to path \'${cwd}\'`);c"
"onst formData = new FormData();formData.append(\"file\", file);xhrFetch(`/fm/uploadFile/?path=${cwd}`,"
" {method: \"POST\",body: formData,onProgress: function (progress, loaded, total) {console.log(`Progres"
"s: ${progress.toFixed(2)}% (${loaded}/${total} bytes)`);updateProgress(progress.toFixed(2), \"UPLOAD "
"STATUS\");}}).then(function (respz) {console.log(respz);files();}).catch(function (err) {console.erro"
"r(err);const statusDiv = document.getElementById(\'statusText\');statusDiv.innerHTML = `Error uploadin"
"g ${file.name}: ${err.message}`;statusDiv.style.color = \'red\';});}</script></body></html>"
;

#endif // HTML_TEMPLATE_H
