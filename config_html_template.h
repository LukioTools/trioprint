#ifndef HTML_TEMPLATE_H
#define HTML_TEMPLATE_H

const char CONFIGURATION_HTML_TEMPLATE[] PROGMEM = 
"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>Flash Memory Configuration</title>"
"<style>body {font-family: Arial, sans-serif;padding: 20px;background: #151d2b;} label {color: #d1dae"
"3;} div {color: #d1dae3;} .error {color: red;} .container {background: #1f2333;padding: 20px;border-"
"radius: 10px;max-width: 800px;margin: auto;box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);} .section-ti"
"tle {margin-top: 20px;font-size: 20px;font-weight: bold;color: #d1dae3;border-bottom: 2px solid #ccc"
";padding-bottom: 5px;margin-bottom: 10px;} label {display: block;margin-top: 10px;font-weight: bold;"
"} input,select {width: 90%;padding: 8px;margin-top: 5px;border-radius: 0px;background-color: #d1dae3"
";} input[type=\"number\"] {max-width: 100px; } select {max-width: 100px;} button {padding: 10px 20px;b"
"ackground: #007BFF;color: white;border: none;border-radius: 5px;cursor: pointer;} button:disabled {b"
"ackground: gray;} .hidden {display: none;} #status {margin-top: 20px;font-weight: bold;} #SdCardStat"
"us {font-weight: bold;} .required::after {content: \" *\";color: red;} .label-wrapper {display: flex;a"
"lign-items: center;gap: 5px;margin-bottom: 4px;justify-content: space-between;} .tooltip {position: "
"relative;display: inline-block;cursor: pointer;} .tooltip .tooltiptext {visibility: hidden;width: 22"
"0px; background-color: #555;color: #fff;text-align: left;border-radius: 6px;padding: 8px;position: a"
"bsolute;bottom: 25px; right: 0; z-index: 1000;opacity: 0;transition: opacity 0.3s;font-size: 14px;} "
".tooltip:hover .tooltiptext {visibility: visible;opacity: 1;}</style><style>.restart-container { bac"
"kground: #839499;padding: 10px;max-width: 300px;margin-top: 30px;margin-left: auto;margin-right: aut"
"o;border-radius: 12px;box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);text-align: center;} .restart-button"
" {background: #cc2f21;color: white;padding: 12px 24px;border: none;border-radius: 8px;cursor: pointe"
"r;font-size: 16px;transition: background 0.3s;} .restart-button:hover {background: #ae0101;} .upload"
"-container {background: #839499;padding: 30px;margin-top: 30px;border-radius: 12px;box-shadow: 0 8px"
" 20px rgba(0, 0, 0, 0.1);text-align: center;} .file-input {display: none;} .custom-button {backgroun"
"d: #667485;color: white;padding: 12px 24px;border: none;border-radius: 8px;cursor: pointer;font-size"
": 16px;transition: background 0.3s;} .custom-button:hover {background: #6d84d1;} .progress-bar-conta"
"iner {width: 100%;background-color: #ffffff;border-radius: 10px;overflow: hidden;margin-top: 20px;he"
"ight: 20px;} .progress-bar {height: 100%;background-color: #4caf50;width: 0%;transition: width 0.3s;"
"} .status-text {margin-top: 10px;font-size: 14px;color: #d1dae3;}</style><script>function xhrFetch(u"
"rl, options) {options = options || {};return new Promise(function (resolve, reject) {var xhr = new X"
"MLHttpRequest(); xhr.open(options.method || \'GET\', url); if (options.headers) {for (var key in optio"
"ns.headers) {if (options.headers.hasOwnProperty(key)) {xhr.setRequestHeader(key, options.headers[key"
"]);}}} if (options.responseType) {xhr.responseType = options.responseType;} if (xhr.upload && option"
"s.onProgress) {xhr.upload.onprogress = function (event) {if (event.lengthComputable) {const progress"
" = (event.loaded / event.total) * 100;options.onProgress(progress, event.loaded, event.total);}};} x"
"hr.onload = function () {if (xhr.status >= 200 && xhr.status < 300) {resolve({ok: true,status: xhr.s"
"tatus,statusText: xhr.statusText,json: function () {return Promise.resolve(JSON.parse(xhr.responseTe"
"xt));},text: function () {return Promise.resolve(xhr.responseText);}});} else {reject(new Error(\'HTT"
"P Error: \' + xhr.status));}}; xhr.onerror = function () {reject(new Error(\'Network Error\'));}; xhr.s"
"end(options.body || null);});}</script></head><body><div class=\"container\"><h1>Trioprint Configurati"
"on</h1><div class=\"section-title\">WiFi Settings</div><div class=\"label-wrapper\"><label for=\"wifi_ssi"
"d\" class=\"required\">WiFi SSID</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Name of your W"
"iFi network (case-sensitive).</span></span></div><input type=\"text\" id=\"wifi_ssid\" value=\"trioprint\""
" required><div class=\"label-wrapper\"><label for=\"wifi_pwd\" class=\"required\">WiFi Password</label><sp"
"an class=\"tooltip\">?<span class=\"tooltiptext\">Password for your WiFi network.</span></span></div><in"
"put type=\"text\" id=\"wifi_pwd\" value=\"trioprint\" required><div class=\"label-wrapper\"><label for=\"ota_"
"pwd\" class=\"required\">OTA Password</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Password "
"used for OTA (Over-The-Air) updates.</span></span></div><input type=\"text\" id=\"ota_pwd\" value=\"triop"
"rint\" required><div class=\"section-title\">Web Settings</div><div class=\"label-wrapper\"><label for=\"w"
"eb_name\" class=\"required\">mDNS Name</label><span class=\"tooltip\">?<span class=\"tooltiptext\">You can "
"access the printer at http:</span></div><input type=\"text\" id=\"web_name\" value=\"trioprint\" required>"
"<div class=\"label-wrapper\"><label for=\"web_server_port\" class=\"required\">Web Server Port</label><spa"
"n class=\"tooltip\">?<span class=\"tooltiptext\">Port used for the HTTP web server (default: 80).</span>"
"</span></div><input type=\"number\" id=\"web_server_port\" value=\"80\" required><div class=\"label-wrapper"
"\"><label for=\"web_socket_port\" class=\"required\">Web Socket Port</label><span class=\"tooltip\">?<span "
"class=\"tooltiptext\">Port used for the WebSocket server (default: 81).</span></span></div><input type"
"=\"number\" id=\"web_socket_port\" value=\"81\" required><div class=\"section-title\">SD Card Settings</div>"
"<div id=\"SdCardStatus\">Checking...</div><div class=\"label-wrapper\"><label for=\"sd_card_select_pin\" c"
"lass=\"required\">SD Card select pin</label><span class=\"tooltip\">?<span class=\"tooltiptext\">SPI selec"
"t pin for SD card.</span></span></div><input type=\"number\" id=\"sd_card_max_attempts\" value=\"5\" requi"
"red><div class=\"label-wrapper\"><label for=\"sd_spi_speed\" class=\"required\">SD SPI Speed (MHz)</label>"
"<span class=\"tooltip\">?<span class=\"tooltiptext\">SPI bus speed for SD card communication.</span></sp"
"an></div><input type=\"number\" id=\"sd_spi_speed\" value=\"16\" required><div class=\"label-wrapper\"><labe"
"l for=\"sd_card_max_attempts\" class=\"required\">SD Card Max Attempts</label><span class=\"tooltip\">?<sp"
"an class=\"tooltiptext\">Maximum attempts to initialize SD card.</span></span></div><input type=\"numbe"
"r\" id=\"sd_card_max_attempts\" value=\"5\" required><div class=\"label-wrapper\"><label for=\"sd_sector_siz"
"e\" class=\"required\">SD Sector Size</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Size of e"
"ach SD card sector in bytes (typically 512).</span></span></div><input type=\"number\" id=\"sd_sector_s"
"ize\" value=\"512\" required><div class=\"label-wrapper\"><label for=\"file_chunk_size\" class=\"required\">F"
"ile Chunk Size (not used)</label><span class=\"tooltip\">?<span class=\"tooltiptext\">not used</span></s"
"pan></div><input type=\"number\" id=\"file_chunk_size\" value=\"1024\" required><div class=\"section-title\""
">Device Serial Config</div><div class=\"label-wrapper\"><label for=\"dev_baudrate\" class=\"required\">Bau"
"d Rate</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Serial communication speed (e.g., 250"
"000 baud).</span></span></div><input type=\"number\" id=\"dev_baudrate\" value=\"250000\" required><div cl"
"ass=\"label-wrapper\"><label for=\"dev_serial\" class=\"required\">Serial Instance</label><span class=\"too"
"ltip\">?<span class=\"tooltiptext\">Which serial port to use (1, 2, etc.).</span></span></div><input ty"
"pe=\"number\" id=\"dev_serial\" value=\"2\" required><div id=\"dev_custom_fields\" class=\"hidden\"><div class"
"=\"label-wrapper\"><label for=\"dev_config\" class=\"required\">Data Format</label><span class=\"tooltip\">?"
"<span class=\"tooltiptext\">Serial data format (e.g., 8N1 = 8 bits, No parity, 1 stop bit).</span></sp"
"an></div><select id=\"dev_config\" required><option value=\"6\">8N1</option><option value=\"14\">8N2</opti"
"on><option value=\"38\">8O1</option><option value=\"46\">8O2</option><option value=\"54\">8E1</option><opt"
"ion value=\"62\">8E2</option><option value=\"4\">7N1</option><option value=\"12\">7N2</option><option valu"
"e=\"36\">7O1</option><option value=\"44\">7O2</option><option value=\"52\">7E1</option><option value=\"60\">"
"7E2</option></select><div class=\"label-wrapper\"><label for=\"dev_rx\" class=\"required\">RX Pin</label><"
"span class=\"tooltip\">?<span class=\"tooltiptext\">Pin number used for receiving data.</span></span></d"
"iv><input type=\"number\" id=\"dev_rx\"><div class=\"label-wrapper\"><label for=\"dev_tx\" class=\"required\">"
"TX Pin</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Pin number used for transmitting data"
".</span></span></div><input type=\"number\" id=\"dev_tx\"></div><div class=\"label-wrapper\"><label for=\"d"
"ev_custom\" class=\"required\">Custom Config</label><span class=\"tooltip\">?<span class=\"tooltiptext\">En"
"able manual serial pin/config setup.</span></span></div><select id=\"dev_custom\" required><option val"
"ue=\"false\">False</option><option value=\"true\">True</option></select><div class=\"section-title\">Debug"
" Serial Config</div><div class=\"label-wrapper\"><label for=\"deb_baudrate\" class=\"required\">Baud Rate<"
"/label><span class=\"tooltip\">?<span class=\"tooltiptext\">Debug serial communication speed.</span></sp"
"an></div><input type=\"number\" id=\"deb_baudrate\" value=\"250000\" required><div class=\"label-wrapper\"><"
"label for=\"deb_serial\" class=\"required\">Serial Instance</label><span class=\"tooltip\">?<span class=\"t"
"ooltiptext\">Serial port for debug (1, 2, etc.).</span></span></div><input type=\"number\" id=\"deb_seri"
"al\" value=\"1\" required><div id=\"deb_custom_fields\" class=\"hidden\"><div class=\"label-wrapper\"><label "
"for=\"deb_config\" class=\"required\">Data Format</label><span class=\"tooltip\">?<span class=\"tooltiptext"
"\">Debug serial data format.</span></span></div><select id=\"deb_config\" required><option value=\"6\">8N"
"1</option><option value=\"14\">8N2</option><option value=\"38\">8O1</option><option value=\"46\">8O2</opti"
"on><option value=\"54\">8E1</option><option value=\"62\">8E2</option><option value=\"4\">7N1</option><opti"
"on value=\"12\">7N2</option><option value=\"36\">7O1</option><option value=\"44\">7O2</option><option valu"
"e=\"52\">7E1</option><option value=\"60\">7E2</option></select><div class=\"label-wrapper\"><label for=\"de"
"b_rx\" class=\"required\">RX Pin</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Debug RX pin n"
"umber.</span></span></div><input type=\"number\" id=\"deb_rx\"><div class=\"label-wrapper\"><label for=\"de"
"b_tx\" class=\"required\">TX Pin</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Debug TX pin n"
"umber.</span></span></div><input type=\"number\" id=\"deb_tx\"></div><div class=\"label-wrapper\"><label f"
"or=\"deb_custom\" class=\"required\">Custom Config</label><span class=\"tooltip\">?<span class=\"tooltiptex"
"t\">Enable custom debug config.</span></span></div><select id=\"deb_custom\" required><option value=\"fa"
"lse\">False</option><option value=\"true\">True</option></select><div class=\"label-wrapper\"><label for="
"\"deb_enabled\" class=\"required\">Enabled</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Turn "
"debug serial output ON or OFF.</span></span></div><select id=\"deb_enabled\" required><option value=\"t"
"rue\">True</option><option value=\"false\">False</option></select><div class=\"section-title\">Printer Se"
"ttings</div><div class=\"label-wrapper\"><label for=\"printer_command_size\" class=\"required\">Printer Co"
"mmand buffer size</label><span class=\"tooltip\">?<span class=\"tooltiptext\">How many commands can prin"
"ters buffer hold.</span></span></div><input type=\"number\" id=\"printer_command_size\" value=\"12\" requi"
"red><div class=\"label-wrapper\"><label for=\"printer_buffer_size\" class=\"required\">Printer Buffer Size"
"</label><span class=\"tooltip\">?<span class=\"tooltiptext\">how many characters can printers buffer hol"
"d.</span></span></div><input type=\"number\" id=\"printer_buffer_size\" value=\"1152\" required><div class"
"=\"label-wrapper\"><label for=\"printer_timeout\" class=\"required\">Printer Timeout (ms)</label><span cla"
"ss=\"tooltip\">?<span class=\"tooltiptext\">Timeout for printer responses (milliseconds). After that the"
" esp considers itsbeing ofline</span></span></div><input type=\"number\" id=\"printer_timeout\" value=\"1"
"000\" required><div class=\"upload-container\"><h2 style=\"color: #d1dae3;\">Upload Main web Page</h2><p>"
"this is not required if file was uploaded into SD card beforehand</p><input type=\"file\" id=\"fileInpu"
"t\" class=\"file-input\"><button class=\"custom-button\" onclick=\"document.getElementById(\'fileInput\').cl"
"ick()\">Select File</button><div class=\"progress-bar-container\" id=\"progressContainer\" style=\"display"
": none;\"><div class=\"progress-bar\" id=\"progressBar\"></div></div><div class=\"status-text\" id=\"statusT"
"ext\"></div></div><div class=\"restart-container\"><button class=\"restart-button\" onclick=\"reboot()\">Re"
"boot</button><div class=\"status-text\" id=\"rebootStatusText\"></div></div><div id=\"status\"></div></div"
"><script>const configMap = {wifi_ssid: 0,wifi_pwd: 1,ota_pwd: 2,web_name: 3,web_server_port: 4,web_s"
"ocket_port: 5,sd_sector_size: 6,file_chunk_size: 7,sd_spi_speed: 8,sd_spi_ss: 9,sd_card_max_attempts"
": 10,dev_serial_group: 11,deb_serial_group: 12,printer_buffer_size: 13,printer_command_size: 14,prin"
"ter_timeout: 15}; const inputs = document.querySelectorAll(\'input, select\');const statusDiv = docume"
"nt.getElementById(\'status\');async function saveField(input) {const id = input.id;let configId;const "
"formData = new FormData();if (id.startsWith(\'dev_\')) {configId = configMap.dev_serial_group;formData"
".append(\'config\', configId);formData.append(\'br\', document.getElementById(\'dev_baudrate\').value);for"
"mData.append(\'c\', parseInt(document.getElementById(\'dev_config\').value, 10));formData.append(\'s\', do"
"cument.getElementById(\'dev_serial\').value);formData.append(\'rx\', document.getElementById(\'dev_rx\').v"
"alue);formData.append(\'tx\', document.getElementById(\'dev_tx\').value);formData.append(\'cm\', document."
"getElementById(\'dev_custom\').value);} else if (id.startsWith(\'deb_\')) {configId = configMap.deb_seri"
"al_group;formData.append(\'config\', configId);formData.append(\'br\', document.getElementById(\'deb_baud"
"rate\').value);formData.append(\'c\', parseInt(document.getElementById(\'deb_config\').value, 10));formDa"
"ta.append(\'s\', document.getElementById(\'deb_serial\').value);formData.append(\'rx\', document.getElemen"
"tById(\'deb_rx\').value);formData.append(\'tx\', document.getElementById(\'deb_tx\').value);formData.appen"
"d(\'cm\', document.getElementById(\'deb_custom\').value);formData.append(\'e\', document.getElementById(\'d"
"eb_enabled\').value);} else {configId = configMap[id];if (configId === undefined) {console.warn(`No m"
"apping for ${id}`);return;}formData.append(\'config\', configId);formData.append(\'status\', input.value"
");}statusDiv.innerHTML = `Saving ${id}...`;statusDiv.style.color = \'black\';try {const response = awa"
"it fetch(\'/config/setDynamicConfig\', {method: \'POST\',body: formData});if (!response.ok) throw new Er"
"ror(`HTTP ${response.status}`);const text = await response.text();if (text !== \'saved\') throw new Er"
"ror(`Server error: ${text}`);statusDiv.innerHTML = `Saved ${id} successfully.`;statusDiv.style.color"
" = \'green\';} catch (err) {statusDiv.innerHTML = `Error saving ${id}: ${err.message}`;statusDiv.style"
".color = \'red\';}} inputs.forEach(input => {input.addEventListener(\'change\', () => {if (input.require"
"d && input.value.trim() === \'\') {input.style.borderColor = \'red\';return;} else {input.style.borderCo"
"lor = \'#ccc\';}saveField(input);});}); const devCustomSelect = document.getElementById(\'dev_custom\');"
"const debCustomSelect = document.getElementById(\'deb_custom\');const devCustomFields = document.getEl"
"ementById(\'dev_custom_fields\');const debCustomFields = document.getElementById(\'deb_custom_fields\');"
"devCustomSelect.addEventListener(\'change\', function () {devCustomFields.classList.toggle(\'hidden\', t"
"his.value !== \'true\');});debCustomSelect.addEventListener(\'change\', function () {debCustomFields.cla"
"ssList.toggle(\'hidden\', this.value !== \'true\');}); devCustomFields.classList.toggle(\'hidden\', devCus"
"tomSelect.value !== \'true\');debCustomFields.classList.toggle(\'hidden\', debCustomSelect.value !== \'tr"
"ue\'); function updateProgress(progress, status) {const progressBar = document.getElementById(\'progre"
"ssBar\');const statusText = document.getElementById(\'statusText\');progressBar.style.width = progress "
"+ \"%\";statusText.innerText = `${status}: ${progress}%`;} document.getElementById(\'fileInput\').addEve"
"ntListener(\'change\', function (event) {const file = event.target.files[0];if (file) {document.getEle"
"mentById(\'progressContainer\').style.display = \'block\';upload_file(file);}}); function xhrFetch(url, "
"options) {options = options || {};return new Promise(function (resolve, reject) {var xhr = new XMLHt"
"tpRequest(); xhr.open(options.method || \'GET\', url); if (options.headers) {for (var key in options.h"
"eaders) {if (options.headers.hasOwnProperty(key)) {xhr.setRequestHeader(key, options.headers[key]);}"
"}} if (options.responseType) {xhr.responseType = options.responseType;} if (xhr.upload && options.on"
"Progress) {xhr.upload.onprogress = function (event) {if (event.lengthComputable) {const progress = ("
"event.loaded / event.total) * 100;options.onProgress(progress, event.loaded, event.total);}};} xhr.o"
"nload = function () {if (xhr.status >= 200 && xhr.status < 300) {resolve({ok: true,status: xhr.statu"
"s,statusText: xhr.statusText,json: function () {return Promise.resolve(JSON.parse(xhr.responseText))"
";},text: function () {return Promise.resolve(xhr.responseText);}});} else {reject(new Error(\'HTTP Er"
"ror: \' + xhr.status));}}; xhr.onerror = function () {reject(new Error(\'Network Error\'));}; xhr.send("
"options.body || null);});} function upload_file(file) {cwd = \'/\';console.log(`uploading file: \'${fil"
"e.name}\' to path \'${cwd}\'`);const formData = new FormData();formData.append(\"file\", file);xhrFetch(`"
"/fm/uploadFile/?path=${cwd}`, {method: \"POST\",body: formData,onProgress: function (progress, loaded,"
" total) {console.log(`Progress: ${progress.toFixed(2)}% (${loaded}/${total} bytes)`);updateProgress("
"progress.toFixed(2), \"UPLOAD STATUS\");}}).then(function (respz) {console.log(respz);files();}).catch"
"(function (err) {console.error(err);const statusDiv = document.getElementById(\'statusText\');statusDi"
"v.innerHTML = `Error uploading ${file.name}: ${err.message}`;statusDiv.style.color = \'red\';});} asyn"
"c function fetchSDCardStatus() {try {const response = await fetch(\'/server/sdCardStatus\');const data"
" = await response.json();const sdCardStatusElement = document.getElementById(\'SdCardStatus\'); if (da"
"ta.cardStatus) {sdCardStatusElement.textContent = \'SD Card is Initialized\';sdCardStatusElement.class"
"List.remove(\'error\');} else {sdCardStatusElement.textContent = \'SD Card is NOT Initialized\';sdCardSt"
"atusElement.classList.add(\'error\');}} catch (error) {document.getElementById(\'SdCardStatus\').textCon"
"tent = \'Error fetching status\';document.getElementById(\'SdCardStatus\').classList.add(\'error\');}} fet"
"chSDCardStatus(); setInterval(fetchSDCardStatus, 500); async function fetchFlashStorage() {for (cons"
"t [id, configNum] of Object.entries(configMap)) {try {const response = await fetch(`/config/getDynam"
"icConfig?config=${configNum}`);const text = await response.text();const element = document.getElemen"
"tById(id);if (element) {element.value = text.trim();}} catch (error) {console.error(`Failed to fetch"
" config ${configNum} for ${id}`, error);}} try {const devResponse = await fetch(`/config/getDynamicC"
"onfig?config=10`);const devText = await devResponse.text();const [baudRate, config, serial, rx, tx, "
"custom] = devText.split(\',\'); document.getElementById(\'dev_baudrate\').value = baudRate;document.getE"
"lementById(\'dev_serial\').value = serial;document.getElementById(\'dev_custom\').value = custom; if (cu"
"stom === \"true\") {document.getElementById(\'dev_custom_fields\').classList.remove(\'hidden\');document.g"
"etElementById(\'dev_config\').value = config;document.getElementById(\'dev_rx\').value = rx;document.get"
"ElementById(\'dev_tx\').value = tx;}} catch (error) {console.error(\'Failed to fetch DevSerialConfig\', "
"error);} try {const debResponse = await fetch(`/config/getDynamicConfig?config=11`);const debText = "
"await debResponse.text();const [baudRate, config, serial, rx, tx, custom, enabled] = debText.split(\'"
",\'); document.getElementById(\'deb_baudrate\').value = baudRate;document.getElementById(\'deb_serial\')."
"value = serial;document.getElementById(\'deb_custom\').value = custom;document.getElementById(\'deb_ena"
"bled\').value = enabled; if (custom === \"true\") {document.getElementById(\'deb_custom_fields\').classLi"
"st.remove(\'hidden\');document.getElementById(\'deb_config\').value = config;document.getElementById(\'de"
"b_rx\').value = rx;document.getElementById(\'deb_tx\').value = tx;}} catch (error) {console.error(\'Fail"
"ed to fetch DebugSerialConfig\', error);}} window.addEventListener(\'DOMContentLoaded\', fetchFlashStor"
"age); async function reboot() {try {const response = await fetch(\'/server/reboot\');const data = awai"
"t response.json();const rebootStatusElement = document.getElementById(\'rebootStatusText\'); if (data."
"cardStatus) {rebootStatusElement.textContent = \'reboot successful\';rebootStatusElement.classList.rem"
"ove(\'error\');location.reload()} else {rebootStatusElement.textContent = \'reboot failed\';rebootStatus"
"Element.classList.add(\'error\');}} catch (error) {document.getElementById(\'rebootStatusText\').textCon"
"tent = \'Error fetching status\';document.getElementById(\'rebootStatusText\').classList.add(\'error\');}}"
"</script></body></html>"
;

#endif // HTML_TEMPLATE_H
