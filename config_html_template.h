#ifndef HTML_TEMPLATE_H
#define HTML_TEMPLATE_H

const char CONFIGURATION_HTML_TEMPLATE[] PROGMEM = 
"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>Flash Memory Configuration</title>"
"<style>body {font-family: Arial, sans-serif;padding: 20px;background: #151d2b;} label {color: #d1dae"
"3;} div {color: #d1dae3;} .error {color: red;} .container {background: #1f2333;padding: 20px;border-"
"radius: 10px;max-width: 800px;margin: auto;box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);} .section-ti"
"tle {margin-top: 20px;font-size: 20px;font-weight: bold;color: #d1dae3;border-bottom: 2px solid #ccc"
";padding-bottom: 5px;margin-bottom: 10px;} label {display: block;margin-top: 10px;font-weight: bold;"
"} input,select {width: 90%;padding: 8px;margin-top: 5px;border-radius: 0px;background-color: #d1dae3"
";} input[type=\"number\"] {max-width: 100px; } select {max-width: 100px;} button {padding: 10px 20px;b"
"ackground: #007BFF;color: white;border: none;border-radius: 5px;cursor: pointer;} button:disabled {b"
"ackground: gray;} .hidden {display: none;} #status {margin-top: 20px;font-weight: bold;} .required::"
"after {content: \" *\";color: red;} .label-wrapper {display: flex;align-items: center;gap: 5px;margin-"
"bottom: 4px;justify-content: space-between;} .tooltip {position: relative;display: inline-block;curs"
"or: pointer;} .tooltip .tooltiptext {visibility: hidden;width: 220px; background-color: #555;color: "
"#fff;text-align: left;border-radius: 6px;padding: 8px;position: absolute;bottom: 25px; right: 0; z-i"
"ndex: 1000;opacity: 0;transition: opacity 0.3s;font-size: 14px;} .tooltip:hover .tooltiptext {visibi"
"lity: visible;opacity: 1;}</style><style>.restart-container { background: #839499;padding: 10px;max-"
"width: 300px;margin-top: 30px;margin-left: auto;margin-right: auto;border-radius: 12px;box-shadow: 0"
" 8px 20px rgba(0, 0, 0, 0.1);text-align: center;} .restart-button {background: #cc2f21;color: white;"
"padding: 12px 24px;border: none;border-radius: 8px;cursor: pointer;font-size: 16px;transition: backg"
"round 0.3s;} .restart-button:hover {background: #ae0101;} .upload-container {background: #839499;pad"
"ding: 30px;margin-top: 30px;border-radius: 12px;box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);text-align"
": center;} .file-input {display: none;} .custom-button {background: #667485;color: white;padding: 12"
"px 24px;border: none;border-radius: 8px;cursor: pointer;font-size: 16px;transition: background 0.3s;"
"} .custom-button:hover {background: #6d84d1;} .progress-bar-container {width: 100%;background-color:"
" #ffffff;border-radius: 10px;overflow: hidden;margin-top: 20px;height: 20px;} .progress-bar {height:"
" 100%;background-color: #4caf50;width: 0%;transition: width 0.3s;} .status-text {margin-top: 10px;fo"
"nt-size: 14px;color: #d1dae3;}</style><script>function xhrFetch(url, options) {options = options || "
"{};return new Promise(function (resolve, reject) {var xhr = new XMLHttpRequest(); xhr.open(options.m"
"ethod || \'GET\', url); if (options.headers) {for (var key in options.headers) {if (options.headers.ha"
"sOwnProperty(key)) {xhr.setRequestHeader(key, options.headers[key]);}}} if (options.responseType) {x"
"hr.responseType = options.responseType;} if (xhr.upload && options.onProgress) {xhr.upload.onprogres"
"s = function (event) {if (event.lengthComputable) {const progress = (event.loaded / event.total) * 1"
"00;options.onProgress(progress, event.loaded, event.total);}};} xhr.onload = function () {if (xhr.st"
"atus >= 200 && xhr.status < 300) {resolve({ok: true,status: xhr.status,statusText: xhr.statusText,js"
"on: function () {return Promise.resolve(JSON.parse(xhr.responseText));},text: function () {return Pr"
"omise.resolve(xhr.responseText);}});} else {reject(new Error(\'HTTP Error: \' + xhr.status));}}; xhr.o"
"nerror = function () {reject(new Error(\'Network Error\'));}; xhr.send(options.body || null);});}</scr"
"ipt></head><body><div class=\"container\"><h1>Trioprint Configuration</h1><div class=\"section-title\">W"
"iFi Settings</div><div class=\"label-wrapper\"><label for=\"wifi_ssid\" class=\"required\">WiFi SSID</labe"
"l><span class=\"tooltip\">?<span class=\"tooltiptext\">Name of your WiFi network (case-sensitive).</span"
"></span></div><input type=\"text\" id=\"wifi_ssid\" value=\"trioprint\" required><div class=\"label-wrapper"
"\"><label for=\"wifi_pwd\" class=\"required\">WiFi Password</label><span class=\"tooltip\">?<span class=\"to"
"oltiptext\">Password for your WiFi network.</span></span></div><input type=\"text\" id=\"wifi_pwd\" value"
"=\"trioprint\" required><div class=\"label-wrapper\"><label for=\"ota_pwd\" class=\"required\">OTA Password<"
"/label><span class=\"tooltip\">?<span class=\"tooltiptext\">Password used for OTA (Over-The-Air) updates"
".</span></span></div><input type=\"text\" id=\"ota_pwd\" value=\"trioprint\" required><div class=\"section-"
"title\">Web Settings</div><div class=\"label-wrapper\"><label for=\"web_name\" class=\"required\">mDNS Name"
"</label><span class=\"tooltip\">?<span class=\"tooltiptext\">You can access the printer at http:</span><"
"/div><input type=\"text\" id=\"web_name\" value=\"trioprint\" required><div class=\"label-wrapper\"><label f"
"or=\"web_server_port\" class=\"required\">Web Server Port</label><span class=\"tooltip\">?<span class=\"too"
"ltiptext\">Port used for the HTTP web server (default: 80).</span></span></div><input type=\"number\" i"
"d=\"web_server_port\" value=\"80\" required><div class=\"label-wrapper\"><label for=\"web_socket_port\" clas"
"s=\"required\">Web Socket Port</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Port used for t"
"he WebSocket server (default: 81).</span></span></div><input type=\"number\" id=\"web_socket_port\" valu"
"e=\"81\" required><div class=\"section-title\">SD Card Settings</div><div id=\"status\">Checking...</div><"
"div class=\"label-wrapper\"><label for=\"sd_card_select_pin\" class=\"required\">SD Card select pin</label"
"><span class=\"tooltip\">?<span class=\"tooltiptext\">SPI select pin for SD card.</span></span></div><in"
"put type=\"number\" id=\"sd_card_max_attempts\" value=\"5\" required><div class=\"label-wrapper\"><label for"
"=\"sd_spi_speed\" class=\"required\">SD SPI Speed (MHz)</label><span class=\"tooltip\">?<span class=\"toolt"
"iptext\">SPI bus speed for SD card communication.</span></span></div><input type=\"number\" id=\"sd_spi_"
"speed\" value=\"16\" required><div class=\"label-wrapper\"><label for=\"sd_card_max_attempts\" class=\"requi"
"red\">SD Card Max Attempts</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Maximum attempts t"
"o initialize SD card.</span></span></div><input type=\"number\" id=\"sd_card_max_attempts\" value=\"5\" re"
"quired><div class=\"label-wrapper\"><label for=\"sd_sector_size\" class=\"required\">SD Sector Size</label"
"><span class=\"tooltip\">?<span class=\"tooltiptext\">Size of each SD card sector in bytes (typically 51"
"2).</span></span></div><input type=\"number\" id=\"sd_sector_size\" value=\"512\" required><div class=\"lab"
"el-wrapper\"><label for=\"file_chunk_size\" class=\"required\">File Chunk Size (not used)</label><span cl"
"ass=\"tooltip\">?<span class=\"tooltiptext\">not used</span></span></div><input type=\"number\" id=\"file_c"
"hunk_size\" value=\"1024\" required><div class=\"section-title\">Device Serial Config</div><div class=\"la"
"bel-wrapper\"><label for=\"dev_baudrate\" class=\"required\">Baud Rate</label><span class=\"tooltip\">?<spa"
"n class=\"tooltiptext\">Serial communication speed (e.g., 250000 baud).</span></span></div><input type"
"=\"number\" id=\"dev_baudrate\" value=\"250000\" required><div class=\"label-wrapper\"><label for=\"dev_seria"
"l\" class=\"required\">Serial Instance</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Which se"
"rial port to use (1, 2, etc.).</span></span></div><input type=\"number\" id=\"dev_serial\" value=\"2\" req"
"uired><div id=\"dev_custom_fields\" class=\"hidden\"><div class=\"label-wrapper\"><label for=\"dev_config\" "
"class=\"required\">Data Format</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Serial data for"
"mat (e.g., 8N1 = 8 bits, No parity, 1 stop bit).</span></span></div><select id=\"dev_config\" required"
"><option value=\"6\">8N1</option><option value=\"14\">8N2</option><option value=\"38\">8O1</option><option"
" value=\"46\">8O2</option><option value=\"54\">8E1</option><option value=\"62\">8E2</option><option value="
"\"4\">7N1</option><option value=\"12\">7N2</option><option value=\"36\">7O1</option><option value=\"44\">7O2"
"</option><option value=\"52\">7E1</option><option value=\"60\">7E2</option></select><div class=\"label-wr"
"apper\"><label for=\"dev_rx\" class=\"required\">RX Pin</label><span class=\"tooltip\">?<span class=\"toolti"
"ptext\">Pin number used for receiving data.</span></span></div><input type=\"number\" id=\"dev_rx\"><div "
"class=\"label-wrapper\"><label for=\"dev_tx\" class=\"required\">TX Pin</label><span class=\"tooltip\">?<spa"
"n class=\"tooltiptext\">Pin number used for transmitting data.</span></span></div><input type=\"number\""
" id=\"dev_tx\"></div><div class=\"label-wrapper\"><label for=\"dev_custom\" class=\"required\">Custom Config"
"</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Enable manual serial pin/config setup.</spa"
"n></span></div><select id=\"dev_custom\" required><option value=\"false\">False</option><option value=\"t"
"rue\">True</option></select><div class=\"section-title\">Debug Serial Config</div><div class=\"label-wra"
"pper\"><label for=\"deb_baudrate\" class=\"required\">Baud Rate</label><span class=\"tooltip\">?<span class"
"=\"tooltiptext\">Debug serial communication speed.</span></span></div><input type=\"number\" id=\"deb_bau"
"drate\" value=\"250000\" required><div class=\"label-wrapper\"><label for=\"deb_serial\" class=\"required\">S"
"erial Instance</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Serial port for debug (1, 2, "
"etc.).</span></span></div><input type=\"number\" id=\"deb_serial\" value=\"1\" required><div id=\"deb_custo"
"m_fields\" class=\"hidden\"><div class=\"label-wrapper\"><label for=\"deb_config\" class=\"required\">Data Fo"
"rmat</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Debug serial data format.</span></span>"
"</div><select id=\"deb_config\" required><option value=\"6\">8N1</option><option value=\"14\">8N2</option>"
"<option value=\"38\">8O1</option><option value=\"46\">8O2</option><option value=\"54\">8E1</option><option"
" value=\"62\">8E2</option><option value=\"4\">7N1</option><option value=\"12\">7N2</option><option value=\""
"36\">7O1</option><option value=\"44\">7O2</option><option value=\"52\">7E1</option><option value=\"60\">7E2"
"</option></select><div class=\"label-wrapper\"><label for=\"deb_rx\" class=\"required\">RX Pin</label><spa"
"n class=\"tooltip\">?<span class=\"tooltiptext\">Debug RX pin number.</span></span></div><input type=\"nu"
"mber\" id=\"deb_rx\"><div class=\"label-wrapper\"><label for=\"deb_tx\" class=\"required\">TX Pin</label><spa"
"n class=\"tooltip\">?<span class=\"tooltiptext\">Debug TX pin number.</span></span></div><input type=\"nu"
"mber\" id=\"deb_tx\"></div><div class=\"label-wrapper\"><label for=\"deb_custom\" class=\"required\">Custom C"
"onfig</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Enable custom debug config.</span></sp"
"an></div><select id=\"deb_custom\" required><option value=\"false\">False</option><option value=\"true\">T"
"rue</option></select><div class=\"label-wrapper\"><label for=\"deb_enabled\" class=\"required\">Enabled</l"
"abel><span class=\"tooltip\">?<span class=\"tooltiptext\">Turn debug serial output ON or OFF.</span></sp"
"an></div><select id=\"deb_enabled\" required><option value=\"true\">True</option><option value=\"false\">F"
"alse</option></select><div class=\"section-title\">Printer Settings</div><div class=\"label-wrapper\"><l"
"abel for=\"printer_command_size\" class=\"required\">Printer Command buffer size</label><span class=\"too"
"ltip\">?<span class=\"tooltiptext\">How many commands can printers buffer hold.</span></span></div><inp"
"ut type=\"number\" id=\"printer_command_size\" value=\"12\" required><div class=\"label-wrapper\"><label for"
"=\"printer_buffer_size\" class=\"required\">Printer Buffer Size</label><span class=\"tooltip\">?<span clas"
"s=\"tooltiptext\">how many characters can printers buffer hold.</span></span></div><input type=\"number"
"\" id=\"printer_buffer_size\" value=\"1152\" required><div class=\"label-wrapper\"><label for=\"printer_time"
"out\" class=\"required\">Printer Timeout (ms)</label><span class=\"tooltip\">?<span class=\"tooltiptext\">T"
"imeout for printer responses (milliseconds). After that the esp considers itsbeing ofline</span></sp"
"an></div><input type=\"number\" id=\"printer_timeout\" value=\"1000\" required><div class=\"upload-containe"
"r\"><h2 style=\"color: #d1dae3;\">Upload Main web Page</h2><p>this is not required if file was uploaded"
" into SD card beforehand</p><input type=\"file\" id=\"fileInput\" class=\"file-input\"><button class=\"cust"
"om-button\" onclick=\"document.getElementById(\'fileInput\').click()\">Select File</button><div class=\"pr"
"ogress-bar-container\" id=\"progressContainer\" style=\"display: none;\"><div class=\"progress-bar\" id=\"pr"
"ogressBar\"></div></div><div class=\"status-text\" id=\"statusText\"></div></div><div class=\"restart-cont"
"ainer\"><button class=\"restart-button\" onclick=\"reboot()\">Reboot</button><div class=\"status-text\" id="
"\"rebootStatusText\"></div></div><div id=\"status\"></div></div><script>const configMap = {wifi_ssid: 0,"
"wifi_pwd: 1,ota_pwd: 2,web_name: 3,web_server_port: 4,web_socket_port: 5,sd_sector_size: 6,file_chun"
"k_size: 7,sd_spi_speed: 8,sd_spi_ss: 9,sd_card_max_attempts: 10,dev_serial_group: 11,deb_serial_grou"
"p: 12,printer_buffer_size: 13,printer_command_size: 14,printer_timeout: 15}; const inputs = document"
".querySelectorAll(\'input, select\');const statusDiv = document.getElementById(\'status\');async functio"
"n saveField(input) {const id = input.id;let configId;const formData = new FormData();if (id.startsWi"
"th(\'dev_\')) {configId = configMap.dev_serial_group;formData.append(\'config\', configId);formData.appe"
"nd(\'br\', document.getElementById(\'dev_baudrate\').value);formData.append(\'c\', parseInt(document.getEl"
"ementById(\'dev_config\').value, 10));formData.append(\'s\', document.getElementById(\'dev_serial\').value"
");formData.append(\'rx\', document.getElementById(\'dev_rx\').value);formData.append(\'tx\', document.getE"
"lementById(\'dev_tx\').value);formData.append(\'cm\', document.getElementById(\'dev_custom\').value);} els"
"e if (id.startsWith(\'deb_\')) {configId = configMap.deb_serial_group;formData.append(\'config\', config"
"Id);formData.append(\'br\', document.getElementById(\'deb_baudrate\').value);formData.append(\'c\', parseI"
"nt(document.getElementById(\'deb_config\').value, 10));formData.append(\'s\', document.getElementById(\'d"
"eb_serial\').value);formData.append(\'rx\', document.getElementById(\'deb_rx\').value);formData.append(\'t"
"x\', document.getElementById(\'deb_tx\').value);formData.append(\'cm\', document.getElementById(\'deb_cust"
"om\').value);formData.append(\'e\', document.getElementById(\'deb_enabled\').value);} else {configId = co"
"nfigMap[id];if (configId === undefined) {console.warn(`No mapping for ${id}`);return;}formData.appen"
"d(\'config\', configId);formData.append(\'status\', input.value);}statusDiv.innerHTML = `Saving ${id}..."
"`;statusDiv.style.color = \'black\';try {const response = await fetch(\'/config/setDynamicConfig\', {met"
"hod: \'POST\',body: formData});if (!response.ok) throw new Error(`HTTP ${response.status}`);const text"
" = await response.text();if (text !== \'saved\') throw new Error(`Server error: ${text}`);statusDiv.in"
"nerHTML = `Saved ${id} successfully.`;statusDiv.style.color = \'green\';} catch (err) {statusDiv.inner"
"HTML = `Error saving ${id}: ${err.message}`;statusDiv.style.color = \'red\';}} inputs.forEach(input =>"
" {input.addEventListener(\'change\', () => {if (input.required && input.value.trim() === \'\') {input.st"
"yle.borderColor = \'red\';return;} else {input.style.borderColor = \'#ccc\';}saveField(input);});}); con"
"st devCustomSelect = document.getElementById(\'dev_custom\');const debCustomSelect = document.getEleme"
"ntById(\'deb_custom\');const devCustomFields = document.getElementById(\'dev_custom_fields\');const debC"
"ustomFields = document.getElementById(\'deb_custom_fields\');devCustomSelect.addEventListener(\'change\'"
", function () {devCustomFields.classList.toggle(\'hidden\', this.value !== \'true\');});debCustomSelect."
"addEventListener(\'change\', function () {debCustomFields.classList.toggle(\'hidden\', this.value !== \'t"
"rue\');}); devCustomFields.classList.toggle(\'hidden\', devCustomSelect.value !== \'true\');debCustomFiel"
"ds.classList.toggle(\'hidden\', debCustomSelect.value !== \'true\'); function updateProgress(progress, s"
"tatus) {const progressBar = document.getElementById(\'progressBar\');const statusText = document.getEl"
"ementById(\'statusText\');progressBar.style.width = progress + \"%\";statusText.innerText = `${status}: "
"${progress}%`;} document.getElementById(\'fileInput\').addEventListener(\'change\', function (event) {co"
"nst file = event.target.files[0];if (file) {document.getElementById(\'progressContainer\').style.displ"
"ay = \'block\';upload_file(file);}}); function xhrFetch(url, options) {options = options || {};return "
"new Promise(function (resolve, reject) {var xhr = new XMLHttpRequest(); xhr.open(options.method || \'"
"GET\', url); if (options.headers) {for (var key in options.headers) {if (options.headers.hasOwnProper"
"ty(key)) {xhr.setRequestHeader(key, options.headers[key]);}}} if (options.responseType) {xhr.respons"
"eType = options.responseType;} if (xhr.upload && options.onProgress) {xhr.upload.onprogress = functi"
"on (event) {if (event.lengthComputable) {const progress = (event.loaded / event.total) * 100;options"
".onProgress(progress, event.loaded, event.total);}};} xhr.onload = function () {if (xhr.status >= 20"
"0 && xhr.status < 300) {resolve({ok: true,status: xhr.status,statusText: xhr.statusText,json: functi"
"on () {return Promise.resolve(JSON.parse(xhr.responseText));},text: function () {return Promise.reso"
"lve(xhr.responseText);}});} else {reject(new Error(\'HTTP Error: \' + xhr.status));}}; xhr.onerror = f"
"unction () {reject(new Error(\'Network Error\'));}; xhr.send(options.body || null);});} function uploa"
"d_file(file) {cwd = \'/\';console.log(`uploading file: \'${file.name}\' to path \'${cwd}\'`);const formDat"
"a = new FormData();formData.append(\"file\", file);xhrFetch(`/fm/uploadFile/?path=${cwd}`, {method: \"P"
"OST\",body: formData,onProgress: function (progress, loaded, total) {console.log(`Progress: ${progres"
"s.toFixed(2)}% (${loaded}/${total} bytes)`);updateProgress(progress.toFixed(2), \"UPLOAD STATUS\");}})"
".then(function (respz) {console.log(respz);files();}).catch(function (err) {console.error(err);const"
" statusDiv = document.getElementById(\'statusText\');statusDiv.innerHTML = `Error uploading ${file.nam"
"e}: ${err.message}`;statusDiv.style.color = \'red\';});} async function fetchStatus() {try {const resp"
"onse = await fetch(\'/server/sdCardStatus\');const data = await response.json();const statusElement = "
"document.getElementById(\'status\'); if (data.cardStatus) {statusElement.textContent = \'SD Card is Ini"
"tialized\';statusElement.classList.remove(\'error\');} else {statusElement.textContent = \'SD Card is NO"
"T Initialized\';statusElement.classList.add(\'error\');}} catch (error) {document.getElementById(\'statu"
"s\').textContent = \'Error fetching status\';document.getElementById(\'status\').classList.add(\'error\');}"
"} fetchStatus(); setInterval(fetchStatus, 500); async function reboot() {try {const response = await"
" fetch(\'/server/reboot\');const data = await response.json();const statusElement = document.getElemen"
"tById(\'rebootStatusText\'); if (data.cardStatus) {statusElement.textContent = \'reboot successful\';sta"
"tusElement.classList.remove(\'error\');location.reload()} else {statusElement.textContent = \'reboot fa"
"iled\';statusElement.classList.add(\'error\');}} catch (error) {document.getElementById(\'rebootStatusTe"
"xt\').textContent = \'Error fetching status\';document.getElementById(\'rebootStatusText\').classList.add"
"(\'error\');}}</script></body></html>"
;

#endif // HTML_TEMPLATE_H
