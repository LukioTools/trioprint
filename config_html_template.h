#ifndef HTML_TEMPLATE_H
#define HTML_TEMPLATE_H

const char CONFIGURATION_HTML_TEMPLATE[] PROGMEM = 
"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>Flash Memory Configuration</title>"
"<style>body {font-family: Arial, sans-serif;padding: 20px;background: #151d2b;} label {color: #d1dae"
"3;} div {color: #d1dae3;} .error {color: red;} .success {color: rgb(23, 186, 29);} .container {backg"
"round: #1f2333;padding: 20px;border-radius: 10px;max-width: 800px;margin: auto;box-shadow: 0px 0px 1"
"0px rgba(0, 0, 0, 0.1);} .section-title {margin-top: 20px;font-size: 20px;font-weight: bold;color: #"
"d1dae3;border-bottom: 2px solid #ccc;padding-bottom: 5px;margin-bottom: 10px;} label {display: block"
";margin-top: 10px;font-weight: bold;} input,select {width: 90%;padding: 8px;margin-top: 5px;border-r"
"adius: 0px;background-color: #d1dae3;} input[type=\"number\"] {max-width: 100px; } select {max-width: "
"100px;} button {padding: 10px 20px;background: #007BFF;color: white;border: none;border-radius: 5px;"
"cursor: pointer;} button:disabled {background: gray;} .hidden {display: none;} #status {margin-top: "
"20px;font-weight: bold;} #SdCardStatus {font-weight: bold;} #rebootStatusText {font-weight: bold;} #"
"configSuccess{margin-top: 8px;} .required::after {content: \" *\";color: red;} .label-wrapper {display"
": flex;align-items: center;gap: 5px;margin-bottom: 4px;justify-content: space-between;} .tooltip {po"
"sition: relative;display: inline-block;cursor: pointer;} .tooltip .tooltiptext {visibility: hidden;w"
"idth: 220px; background-color: #555;color: #fff;text-align: left;border-radius: 6px;padding: 8px;pos"
"ition: absolute;bottom: 25px; right: 0; z-index: 1000;opacity: 0;transition: opacity 0.3s;font-size:"
" 14px;} .tooltip:hover .tooltiptext {visibility: visible;opacity: 1;}</style><style>.restart-contain"
"er { background: #839499;padding: 10px;max-width: 300px;margin-top: 30px;margin-left: auto;margin-ri"
"ght: auto;border-radius: 12px;box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);text-align: center;} .restar"
"t-button {background: #cc2f21;color: white;padding: 12px 24px;border: none;border-radius: 8px;cursor"
": pointer;font-size: 16px;transition: background 0.3s;} .restart-button:hover {background: #ae0101;}"
" .upload-container {background: #839499;padding: 30px;margin-top: 30px;border-radius: 12px;box-shado"
"w: 0 8px 20px rgba(0, 0, 0, 0.1);text-align: center;} .file-input {display: none;} .custom-button {b"
"ackground: #667485;color: white;padding: 12px 24px;border: none;border-radius: 8px;cursor: pointer;f"
"ont-size: 16px;transition: background 0.3s;} .custom-button:hover {background: #6d84d1;} .progress-b"
"ar-container {width: 100%;background-color: #ffffff;border-radius: 10px;overflow: hidden;margin-top:"
" 20px;height: 20px;} .progress-bar {height: 100%;background-color: #4caf50;width: 0%;transition: wid"
"th 0.3s;} .status-text {margin-top: 10px;font-size: 14px;color: #d1dae3;}</style><script>function xh"
"rFetch(url, options) {options = options || {};return new Promise(function (resolve, reject) {var xhr"
" = new XMLHttpRequest(); xhr.open(options.method || \'GET\', url); if (options.headers) {for (var key "
"in options.headers) {if (options.headers.hasOwnProperty(key)) {xhr.setRequestHeader(key, options.hea"
"ders[key]);}}} if (options.responseType) {xhr.responseType = options.responseType;} if (xhr.upload &"
"& options.onProgress) {xhr.upload.onprogress = function (event) {if (event.lengthComputable) {const "
"progress = (event.loaded / event.total) * 100;options.onProgress(progress, event.loaded, event.total"
");}};} xhr.onload = function () {if (xhr.status >= 200 && xhr.status < 300) {resolve({ok: true,statu"
"s: xhr.status,statusText: xhr.statusText,json: function () {return Promise.resolve(JSON.parse(xhr.re"
"sponseText));},text: function () {return Promise.resolve(xhr.responseText);}});} else {reject(new Er"
"ror(\'HTTP Error: \' + xhr.status));}}; xhr.onerror = function () {reject(new Error(\'Network Error\'));"
"}; xhr.send(options.body || null);});}</script></head><body><div class=\"container\"><h1>Trioprint Con"
"figuration</h1><div class=\"section-title\">WiFi Settings</div><div class=\"label-wrapper\"><label for=\""
"wifi_ssid\" class=\"required\">WiFi SSID</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Name o"
"f your WiFi network (case-sensitive). If not found. WiFI AP iscreated</span></span></div><input type"
"=\"text\" id=\"wifi_ssid\" value=\"trioprint\" required><div id=\"configSuccess\"></div><div class=\"label-wr"
"apper\"><label for=\"wifi_pwd\" class=\"required\">WiFi Password</label><span class=\"tooltip\">?<span clas"
"s=\"tooltiptext\">Password for your WiFi network.</span></span></div><input type=\"text\" id=\"wifi_pwd\" "
"value=\"trioprint\" required><div id=\"configSuccess\"></div><div class=\"label-wrapper\"><label for=\"ota_"
"pwd\" class=\"required\">OTA Password</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Password "
"used for OTA (Over-The-Air) updates.</span></span></div><input type=\"text\" id=\"ota_pwd\" value=\"triop"
"rint\" required><div id=\"configSuccess\"></div><div class=\"section-title\">Web Settings</div><div class"
"=\"label-wrapper\"><label for=\"web_name\" class=\"required\">mDNS Name</label><span class=\"tooltip\">?/ <s"
"pan class=\"tooltiptext\">You can access the printer at http:</span></div><input type=\"text\" id=\"web_n"
"ame\" value=\"trioprint\" required><div id=\"configSuccess\"></div><div class=\"label-wrapper\"><label for="
"\"web_server_port\" class=\"required\">Web Server Port</label><span class=\"tooltip\">?<span class=\"toolti"
"ptext\">Port used for the HTTP web server (default: 80).</span></span></div><input type=\"number\" id=\""
"web_server_port\" value=\"80\" required><div id=\"configSuccess\"></div><div class=\"label-wrapper\"><label"
" for=\"web_socket_port\" class=\"required\">Web Socket Port</label><span class=\"tooltip\">?<span class=\"t"
"ooltiptext\">Port used for the WebSocket server (default: 81).</span></span></div><input type=\"number"
"\" id=\"web_socket_port\" value=\"81\" required><div id=\"configSuccess\"></div><div class=\"section-title\">"
"SD Card Settings</div><div id=\"SdCardStatus\">Checking...</div><div class=\"label-wrapper\"><label for="
"\"sd_card_select_pin\" class=\"required\">SD Card select pin</label><span class=\"tooltip\">?<span class=\""
"tooltiptext\">SPI select pin for SD card.</span></span></div><input type=\"number\" id=\"sd_card_select_"
"pin\" value=\"5\" required><div id=\"configSuccess\"></div><div class=\"label-wrapper\"><label for=\"sd_spi_"
"speed\" class=\"required\">SD SPI Speed (MHz)</label><span class=\"tooltip\">?<span class=\"tooltiptext\">S"
"PI bus speed for SD card communication.</span></span></div><input type=\"number\" id=\"sd_spi_speed\" va"
"lue=\"16\" required><div id=\"configSuccess\"></div><div class=\"label-wrapper\"><label for=\"sd_card_max_a"
"ttempts\" class=\"required\">SD Card Max Attempts</label><span class=\"tooltip\">?<span class=\"tooltiptex"
"t\">Maximum attempts to initialize SD card.</span></span></div><input type=\"number\" id=\"sd_card_max_a"
"ttempts\" value=\"5\" required><div id=\"configSuccess\"></div><div class=\"label-wrapper\"><label for=\"sd_"
"sector_size\" class=\"required\">SD Sector Size</label><span class=\"tooltip\">?<span class=\"tooltiptext\""
">Size of each SD card sector in bytes (typically 512).</span></span></div><input type=\"number\" id=\"s"
"d_sector_size\" value=\"512\" required><div id=\"configSuccess\"></div><div class=\"label-wrapper\"><label "
"for=\"file_chunk_size\" class=\"required\">File Chunk Size (not used)</label><span class=\"tooltip\">?<spa"
"n class=\"tooltiptext\">not used</span></span></div><input type=\"number\" id=\"file_chunk_size\" value=\"1"
"024\" required><div id=\"configSuccess\"></div><div class=\"section-title\">Device Serial Config</div><di"
"v class=\"label-wrapper\"><label for=\"dev_baudrate\" class=\"required\">Baud Rate</label><span class=\"too"
"ltip\">?<span class=\"tooltiptext\">Serial communication speed (e.g., 250000 baud).</span></span></div>"
"<input type=\"number\" id=\"dev_baudrate\" value=\"250000\" required><div id=\"configSuccess\"></div><div cl"
"ass=\"label-wrapper\"><label for=\"dev_serial\" class=\"required\">Serial Instance</label><span class=\"too"
"ltip\">?<span class=\"tooltiptext\">Which serial port to use (1, 2, etc.).</span></span></div><input ty"
"pe=\"number\" id=\"dev_serial\" value=\"2\" required><div id=\"configSuccess\"></div><div id=\"dev_custom_fie"
"lds\" class=\"hidden\"><div class=\"label-wrapper\"><label for=\"dev_config\" class=\"required\">Data Format<"
"/label><span class=\"tooltip\">?<span class=\"tooltiptext\">Serial data format (e.g., 8N1 = 8 bits, No p"
"arity, 1 stop bit).</span></span></div><select id=\"dev_config\" required><option value=\"6\">8N1</optio"
"n><option value=\"14\">8N2</option><option value=\"38\">8O1</option><option value=\"46\">8O2</option><opti"
"on value=\"54\">8E1</option><option value=\"62\">8E2</option><option value=\"4\">7N1</option><option value"
"=\"12\">7N2</option><option value=\"36\">7O1</option><option value=\"44\">7O2</option><option value=\"52\">7"
"E1</option><option value=\"60\">7E2</option></select><div id=\"configSuccess\"></div><div class=\"label-w"
"rapper\"><label for=\"dev_rx\" class=\"required\">RX Pin</label><span class=\"tooltip\">?<span class=\"toolt"
"iptext\">Pin number used for receiving data.</span></span></div><input type=\"number\" id=\"dev_rx\"><div"
" id=\"configSuccess\"></div><div class=\"label-wrapper\"><label for=\"dev_tx\" class=\"required\">TX Pin</la"
"bel><span class=\"tooltip\">?<span class=\"tooltiptext\">Pin number used for transmitting data.</span></"
"span></div><input type=\"number\" id=\"dev_tx\"><div id=\"configSuccess\"></div></div><div class=\"label-wr"
"apper\"><label for=\"dev_custom\" class=\"required\">Custom Config</label><span class=\"tooltip\">?<span cl"
"ass=\"tooltiptext\">Enable manual serial pin/config setup.</span></span></div><select id=\"dev_custom\" "
"required><option value=\"0\">False</option><option value=\"1\">True</option></select><div id=\"configSucc"
"ess\"></div><div class=\"section-title\">Debug Serial Config</div><div class=\"label-wrapper\"><label for"
"=\"deb_baudrate\" class=\"required\">Baud Rate</label><span class=\"tooltip\">?<span class=\"tooltiptext\">D"
"ebug serial communication speed.</span></span></div><input type=\"number\" id=\"deb_baudrate\" value=\"25"
"0000\" required><div id=\"configSuccess\"></div><div class=\"label-wrapper\"><label for=\"deb_serial\" clas"
"s=\"required\">Serial Instance</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Serial port for"
" debug (1, 2, etc.).</span></span></div><input type=\"number\" id=\"deb_serial\" value=\"1\" required><div"
" id=\"configSuccess\"></div><div id=\"deb_custom_fields\" class=\"hidden\"><div class=\"label-wrapper\"><lab"
"el for=\"deb_config\" class=\"required\">Data Format</label><span class=\"tooltip\">?<span class=\"tooltipt"
"ext\">Debug serial data format.</span></span></div><select id=\"deb_config\" required><option value=\"6\""
">8N1</option><option value=\"14\">8N2</option><option value=\"38\">8O1</option><option value=\"46\">8O2</o"
"ption><option value=\"54\">8E1</option><option value=\"62\">8E2</option><option value=\"4\">7N1</option><o"
"ption value=\"12\">7N2</option><option value=\"36\">7O1</option><option value=\"44\">7O2</option><option v"
"alue=\"52\">7E1</option><option value=\"60\">7E2</option></select><div id=\"configSuccess\"></div><div cla"
"ss=\"label-wrapper\"><label for=\"deb_rx\" class=\"required\">RX Pin</label><span class=\"tooltip\">?<span c"
"lass=\"tooltiptext\">Debug RX pin number.</span></span></div><input type=\"number\" id=\"deb_rx\"><div id="
"\"configSuccess\"></div><div class=\"label-wrapper\"><label for=\"deb_tx\" class=\"required\">TX Pin</label>"
"<span class=\"tooltip\">?<span class=\"tooltiptext\">Debug TX pin number.</span></span></div><input type"
"=\"number\" id=\"deb_tx\"><div id=\"configSuccess\"></div></div><div class=\"label-wrapper\"><label for=\"deb"
"_custom\" class=\"required\">Custom Config</label><span class=\"tooltip\">?<span class=\"tooltiptext\">Enab"
"le custom debug config.</span></span></div><select id=\"deb_custom\" required><option value=\"0\">False<"
"/option><option value=\"1\">True</option></select><div id=\"configSuccess\"></div><div class=\"label-wrap"
"per\"><label for=\"deb_enabled\" class=\"required\">Enabled</label><span class=\"tooltip\">?<span class=\"to"
"oltiptext\">Turn debug serial output ON or OFF.</span></span></div><select id=\"deb_enabled\" required>"
"<option value=\"1\">True</option><option value=\"0\">False</option></select><div id=\"configSuccess\"></di"
"v><div class=\"section-title\">Printer Settings</div><div class=\"label-wrapper\"><label for=\"printer_co"
"mmand_size\" class=\"required\">Printer Command buffer size</label><span class=\"tooltip\">?<span class=\""
"tooltiptext\">How many commands can printers buffer hold.</span></span></div><input type=\"number\" id="
"\"printer_command_size\" value=\"12\" required><div id=\"configSuccess\"></div><div class=\"label-wrapper\">"
"<label for=\"printer_buffer_size\" class=\"required\">Printer Buffer Size</label><span class=\"tooltip\">?"
"<span class=\"tooltiptext\">how many characters can printers buffer hold.</span></span></div><input ty"
"pe=\"number\" id=\"printer_buffer_size\" value=\"1152\" required><div id=\"configSuccess\"></div><div class="
"\"label-wrapper\"><label for=\"printer_timeout\" class=\"required\">Printer Timeout (ms)</label><span clas"
"s=\"tooltip\">?<span class=\"tooltiptext\">Timeout for printer responses (milliseconds). After that the "
"esp considers itsbeing ofline</span></span></div><input type=\"number\" id=\"printer_timeout\" value=\"10"
"00\" required><div id=\"configSuccess\"></div><div class=\"upload-container\"><h2 style=\"color: #d1dae3;\""
">Upload Main web Page</h2><p>this is not required if file was uploaded into SD card beforehand</p><i"
"nput type=\"file\" id=\"fileInput\" class=\"file-input\"><button class=\"custom-button\" onclick=\"document.g"
"etElementById(\'fileInput\').click()\">Select File</button><div class=\"progress-bar-container\" id=\"prog"
"ressContainer\" style=\"display: none;\"><div class=\"progress-bar\" id=\"progressBar\"></div></div><div cl"
"ass=\"status-text\" id=\"statusText\"></div></div><div class=\"restart-container\"><button class=\"restart-"
"button\" onclick=\"reboot()\">Reboot</button><div class=\"\" id=\"rebootStatusText\"></div></div><div id=\"s"
"tatus\"></div></div><script>const configMap = {wifi_ssid: 0,wifi_pwd: 1,ota_pwd: 2,web_name: 3,web_se"
"rver_port: 4,web_socket_port: 5,sd_sector_size: 6,file_chunk_size: 7,sd_spi_speed: 8,sd_card_select_"
"pin: 9,sd_card_max_attempts: 10,dev_serial_group: 11,deb_serial_group: 12,printer_buffer_size: 13,pr"
"inter_command_size: 14,printer_timeout: 15}; const inputs = document.querySelectorAll(\'input, select"
"\');async function saveField(input) {const id = input.id;statusDiv = input.nextElementSibling;let con"
"figId;const formData = new FormData();if (id.startsWith(\'dev_\')) {configId = configMap.dev_serial_gr"
"oup;formData.append(\'config\', configId);formData.append(\'br\', document.getElementById(\'dev_baudrate\'"
").value);formData.append(\'c\', parseInt(document.getElementById(\'dev_config\').value, 10));formData.ap"
"pend(\'s\', document.getElementById(\'dev_serial\').value);formData.append(\'rx\', document.getElementById"
"(\'dev_rx\').value);formData.append(\'tx\', document.getElementById(\'dev_tx\').value);formData.append(\'cm"
"\', document.getElementById(\'dev_custom\').value);} else if (id.startsWith(\'deb_\')) {configId = config"
"Map.deb_serial_group;formData.append(\'config\', configId);formData.append(\'br\', document.getElementBy"
"Id(\'deb_baudrate\').value);formData.append(\'c\', parseInt(document.getElementById(\'deb_config\').value,"
" 10));formData.append(\'s\', document.getElementById(\'deb_serial\').value);formData.append(\'rx\', docume"
"nt.getElementById(\'deb_rx\').value);formData.append(\'tx\', document.getElementById(\'deb_tx\').value);fo"
"rmData.append(\'cm\', document.getElementById(\'deb_custom\').value);formData.append(\'e\', document.getEl"
"ementById(\'deb_enabled\').value);} else {configId = configMap[id];if (configId === undefined) {consol"
"e.warn(`No mapping for ${id}`);return;}formData.append(\'config\', configId);formData.append(\'status\',"
" input.value);}statusDiv.innerHTML = `Saving ${id}...`;statusDiv.style.color = \'black\';try {const re"
"sponse = await fetch(\'/config/setDynamicConfig\', {method: \'POST\',body: formData});if (!response.ok) "
"throw new Error(`HTTP ${response.status}`);const text = await response.text();if (text !== \'saved\') "
"throw new Error(`Server error: ${text}`);statusDiv.innerHTML = `Saved ${id} successfully.`;statusDiv"
".style.color = \'green\';} catch (err) {statusDiv.innerHTML = `Error saving ${id}: ${err.message}`;sta"
"tusDiv.style.color = \'red\';}} inputs.forEach(input => {input.addEventListener(\'change\', () => {if (i"
"nput.required && input.value.trim() === \'\') {input.style.borderColor = \'red\';return;} else {input.st"
"yle.borderColor = \'#ccc\';}saveField(input);});}); const devCustomSelect = document.getElementById(\'d"
"ev_custom\');const debCustomSelect = document.getElementById(\'deb_custom\');const devCustomFields = do"
"cument.getElementById(\'dev_custom_fields\');const debCustomFields = document.getElementById(\'deb_cust"
"om_fields\');devCustomSelect.addEventListener(\'change\', function () {devCustomFields.classList.toggle"
"(\'hidden\', this.value !== \'1\');});debCustomSelect.addEventListener(\'change\', function () {debCustomF"
"ields.classList.toggle(\'hidden\', this.value !== \'1\');}); devCustomFields.classList.toggle(\'hidden\', "
"devCustomSelect.value !== \'1\');debCustomFields.classList.toggle(\'hidden\', debCustomSelect.value !== "
"\'1\'); function updateProgress(progress, status) {const progressBar = document.getElementById(\'progre"
"ssBar\');const statusText = document.getElementById(\'statusText\');progressBar.style.width = progress "
"+ \"%\";statusText.innerText = `${status}: ${progress}%`;} document.getElementById(\'fileInput\').addEve"
"ntListener(\'change\', function (event) {const file = event.target.files[0];if (file) {document.getEle"
"mentById(\'progressContainer\').style.display = \'block\';upload_file(file);}}); function xhrFetch(url, "
"options) {options = options || {};return new Promise(function (resolve, reject) {var xhr = new XMLHt"
"tpRequest(); xhr.open(options.method || \'GET\', url); if (options.headers) {for (var key in options.h"
"eaders) {if (options.headers.hasOwnProperty(key)) {xhr.setRequestHeader(key, options.headers[key]);}"
"}} if (options.responseType) {xhr.responseType = options.responseType;} if (xhr.upload && options.on"
"Progress) {xhr.upload.onprogress = function (event) {if (event.lengthComputable) {const progress = ("
"event.loaded / event.total) * 100;options.onProgress(progress, event.loaded, event.total);}};} xhr.o"
"nload = function () {if (xhr.status >= 200 && xhr.status < 300) {resolve({ok: true,status: xhr.statu"
"s,statusText: xhr.statusText,json: function () {return Promise.resolve(JSON.parse(xhr.responseText))"
";},text: function () {return Promise.resolve(xhr.responseText);}});} else {reject(new Error(\'HTTP Er"
"ror: \' + xhr.status));}}; xhr.onerror = function () {reject(new Error(\'Network Error\'));}; xhr.send("
"options.body || null);});} function upload_file(file) {cwd = \'/\';console.log(`uploading file: \'${fil"
"e.name}\' to path \'${cwd}\'`);const formData = new FormData();formData.append(\"file\", file);xhrFetch(`"
"/fm/uploadFile/?path=${cwd}`, {method: \"POST\",body: formData,onProgress: function (progress, loaded,"
" total) {console.log(`Progress: ${progress.toFixed(2)}% (${loaded}/${total} bytes)`);updateProgress("
"progress.toFixed(2), \"UPLOAD STATUS\");}}).then(function (respz) {console.log(respz);files();}).catch"
"(function (err) {console.error(err);const statusDiv = document.getElementById(\'statusText\');statusDi"
"v.innerHTML = `Error uploading ${file.name}: ${err.message}`;statusDiv.style.color = \'red\';});} asyn"
"c function fetchSDCardStatus() {try {const response = await fetch(\'/server/sdCardStatus\');const data"
" = await response.json();const sdCardStatusElement = document.getElementById(\'SdCardStatus\'); if (da"
"ta.cardStatus) {sdCardStatusElement.textContent = \'SD Card is Initialized\';sdCardStatusElement.class"
"List.remove(\'error\');sdCardStatusElement.classList.add(\'success\');} else {sdCardStatusElement.textCo"
"ntent = \'SD Card is NOT Initialized\';sdCardStatusElement.classList.remove(\'success\');sdCardStatusEle"
"ment.classList.add(\'error\');}} catch (error) {document.getElementById(\'SdCardStatus\').textContent = "
"\'Error fetching status\';document.getElementById(\'SdCardStatus\').classList.add(\'error\');}} fetchSDCar"
"dStatus(); setInterval(fetchSDCardStatus, 500); async function fetchFlashStorage() {for (const [id, "
"configNum] of Object.entries(configMap)) {try {const response = await fetch(`/config/getDynamicConfi"
"g?config=${configNum}`);const text = await response.text();const element = document.getElementById(i"
"d);if (element) {element.value = text.trim();}} catch (error) {console.error(`Failed to fetch config"
" ${configNum} for ${id}`, error);}} try {const devResponse = await fetch(`/config/getDynamicConfig?c"
"onfig=11`);devText = await devResponse.text();[baudRate, config, serial, rx, tx, custom] = devText.s"
"plit(\',\'); document.getElementById(\'dev_baudrate\').value = baudRate;document.getElementById(\'dev_ser"
"ial\').value = serial;document.getElementById(\'dev_custom\').value = custom; devCustomFields.classList"
".toggle(\'hidden\', true); if (custom === \"true\") {devCustomFields.classList.toggle(\'hidden\', false);d"
"ocument.getElementById(\'dev_custom_fields\').classList.remove(\'hidden\');document.getElementById(\'dev_"
"config\').value = config;document.getElementById(\'dev_rx\').value = rx;document.getElementById(\'dev_tx"
"\').value = tx;}} catch (error) {console.error(\'Failed to fetch DevSerialConfig\', error);} try {const"
" debResponse = await fetch(`/config/getDynamicConfig?config=12`);debText = await debResponse.text();"
"[baudRate, config, serial, rx, tx, custom, enabled] = debText.split(\',\'); document.getElementById(\'d"
"eb_baudrate\').value = baudRate;document.getElementById(\'deb_serial\').value = serial;document.getElem"
"entById(\'deb_custom\').value = custom;document.getElementById(\'deb_enabled\').value = enabled; console"
".log(serial); debCustomFields.classList.toggle(\'hidden\', true); if (custom === \"true\") {debCustomFie"
"lds.classList.toggle(\'hidden\', false);document.getElementById(\'deb_custom_fields\').classList.remove("
"\'hidden\');document.getElementById(\'deb_config\').value = config;document.getElementById(\'deb_rx\').val"
"ue = rx;document.getElementById(\'deb_tx\').value = tx;}} catch (error) {console.error(\'Failed to fetc"
"h DebugSerialConfig\', error);}} window.addEventListener(\'DOMContentLoaded\', fetchFlashStorage); asyn"
"c function reboot() {try {const response = await fetch(\'/server/reboot\');const data = await response"
".json();const rebootStatusElement = document.getElementById(\'rebootStatusText\'); if (data.cardStatus"
") {rebootStatusElement.textContent = \'reboot successful\';rebootStatusElement.classList.remove(\'error"
"\');location.reload()} else {rebootStatusElement.textContent = \'reboot failed\';rebootStatusElement.cl"
"assList.add(\'error\');}} catch (error) {document.getElementById(\'rebootStatusText\').textContent = \'Er"
"ror fetching status\';document.getElementById(\'rebootStatusText\').classList.add(\'error\');}}</script><"
"/body></html>"
;

#endif // HTML_TEMPLATE_H
